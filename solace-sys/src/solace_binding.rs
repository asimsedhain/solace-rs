/* automatically generated by rust-bindgen 0.66.1 */

pub const SOLCLIENT_FD_EVENT_READ: u32 = 1;
pub const SOLCLIENT_FD_EVENT_WRITE: u32 = 2;
pub const SOLCLIENT_FD_EVENT_ALL: u32 = 3;
pub const SOLCLIENT_COS_1: u32 = 0;
pub const SOLCLIENT_COS_2: u32 = 1;
pub const SOLCLIENT_COS_3: u32 = 2;
pub const SOLCLIENT_DELIVERY_MODE_DIRECT: u32 = 0;
pub const SOLCLIENT_DELIVERY_MODE_PERSISTENT: u32 = 16;
pub const SOLCLIENT_DELIVERY_MODE_NONPERSISTENT: u32 = 32;
pub const SOLCLIENT_SUBSCRIBE_FLAGS_WAITFORCONFIRM: u32 = 2;
pub const SOLCLIENT_SUBSCRIBE_FLAGS_LOCAL_DISPATCH_ONLY: u32 = 8;
pub const SOLCLIENT_SUBSCRIBE_FLAGS_REQUEST_CONFIRM: u32 = 16;
pub const SOLCLIENT_MODIFYPROP_FLAGS_WAITFORCONFIRM: u32 = 1;
pub const SOLCLIENT_UUID_STRING_BUFFER_SIZE: u32 = 37;
pub const SOLCLIENT_SESSION_PROP_ACK_EVENT_MODE_PER_MSG: &[u8; 31] =
    b"SESSION_ACK_EVENT_MODE_PER_MSG\0";
pub const SOLCLIENT_SESSION_PROP_ACK_EVENT_MODE_WINDOWED: &[u8; 32] =
    b"SESSION_ACK_EVENT_MODE_WINDOWED\0";
pub const SOLCLIENT_PROP_ENABLE_VAL: &[u8; 2] = b"1\0";
pub const SOLCLIENT_PROP_DISABLE_VAL: &[u8; 2] = b"0\0";
pub const SOLCLIENT_GLOBAL_PROP_DBQUANTASIZE_0: &[u8; 23] = b"GLOBAL_DBQUANTA_SIZE_0\0";
pub const SOLCLIENT_GLOBAL_PROP_DBQUANTASIZE_1: &[u8; 23] = b"GLOBAL_DBQUANTA_SIZE_1\0";
pub const SOLCLIENT_GLOBAL_PROP_DBQUANTASIZE_2: &[u8; 23] = b"GLOBAL_DBQUANTA_SIZE_2\0";
pub const SOLCLIENT_GLOBAL_PROP_DBQUANTASIZE_3: &[u8; 23] = b"GLOBAL_DBQUANTA_SIZE_3\0";
pub const SOLCLIENT_GLOBAL_PROP_DBQUANTASIZE_4: &[u8; 23] = b"GLOBAL_DBQUANTA_SIZE_4\0";
pub const SOLCLIENT_GLOBAL_PROP_MAXPOOLMEM: &[u8; 18] = b"GLOBAL_MAXPOOLMEM\0";
pub const SOLCLIENT_GLOBAL_PROP_GSS_KRB_LIB: &[u8; 19] = b"GLOBAL_GSS_KRB_LIB\0";
pub const SOLCLIENT_GLOBAL_PROP_IBM_CODESET: &[u8; 19] = b"GLOBAL_IBM_CODESET\0";
pub const SOLCLIENT_GLOBAL_PROP_SSL_LIB: &[u8; 15] = b"GLOBAL_SSL_LIB\0";
pub const SOLCLIENT_GLOBAL_PROP_CRYPTO_LIB: &[u8; 18] = b"GLOBAL_CRYPTO_LIB\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_DBQUANTASIZE_0: &[u8; 6] = b"10240\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_DBQUANTASIZE_1: &[u8; 6] = b"32768\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_DBQUANTASIZE_2: &[u8; 6] = b"65536\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_DBQUANTASIZE_3: &[u8; 7] = b"262144\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_DBQUANTASIZE_4: &[u8; 8] = b"1048576\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_MAXPOOLMEM: &[u8; 11] = b"1073741824\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_GSS_KRB_LIB_LINUX: &[u8; 20] = b"libgssapi_krb5.so.2\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_GSS_KRB_LIB_SOLARIS: &[u8; 15] = b"mech_krb5.so.1\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_GSS_KRB_LIB_WINDOWS: &[u8; 12] = b"secur32.dll\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_GSS_KRB_LIB_AIX: &[u8; 38] =
    b"libgssapi_krb5.a(libgssapi_krb5.a.so)\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_IBM_CODESET: &[u8; 18] = b"TPF_CCSID_IBM1047\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_SSL_LIB_UNIX: &[u8; 10] = b"libssl.so\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_SSL_LIB_MACOSX: &[u8; 17] = b"libssl.1.1.dylib\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_SSL_LIB_VMS: &[u8; 20] = b"SSL1$LIBSSL_SHR.EXE\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_SSL_LIB_WINDOWS: &[u8; 15] = b"libssl-1_1.dll\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_CRYPTO_LIB_UNIX: &[u8; 13] = b"libcrypto.so\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_CRYPTO_LIB_MACOSX: &[u8; 20] = b"libcrypto.1.1.dylib\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_CRYPTO_LIB_VMS: &[u8; 23] = b"SSL1$LIBCRYPTO_SHR.EXE\0";
pub const SOLCLIENT_GLOBAL_PROP_DEFAULT_CRYPTO_LIB_WINDOWS: &[u8; 18] = b"libcrypto-1_1.dll\0";
pub const SOLCLIENT_CONTEXT_PROP_TIME_RES_MS: &[u8; 20] = b"CONTEXT_TIME_RES_MS\0";
pub const SOLCLIENT_CONTEXT_PROP_CREATE_THREAD: &[u8; 22] = b"CONTEXT_CREATE_THREAD\0";
pub const SOLCLIENT_CONTEXT_PROP_THREAD_AFFINITY: &[u8; 24] = b"CONTEXT_THREAD_AFFINITY\0";
pub const SOLCLIENT_CONTEXT_PROP_DEFAULT_TIME_RES_MS: &[u8; 3] = b"50\0";
pub const SOLCLIENT_CONTEXT_PROP_DEFAULT_CREATE_THREAD: &[u8; 2] = b"0\0";
pub const SOLCLIENT_CONTEXT_PROP_DEFAULT_THREAD_AFFINITY: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_USERNAME: &[u8; 17] = b"SESSION_USERNAME\0";
pub const SOLCLIENT_SESSION_PROP_PASSWORD: &[u8; 17] = b"SESSION_PASSWORD\0";
pub const SOLCLIENT_SESSION_PROP_HOST: &[u8; 13] = b"SESSION_HOST\0";
pub const SOLCLIENT_SESSION_PROP_PORT: &[u8; 13] = b"SESSION_PORT\0";
pub const SOLCLIENT_SESSION_PROP_BUFFER_SIZE: &[u8; 20] = b"SESSION_BUFFER_SIZE\0";
pub const SOLCLIENT_SESSION_PROP_CONNECT_BLOCKING: &[u8; 25] = b"SESSION_CONNECT_BLOCKING\0";
pub const SOLCLIENT_SESSION_PROP_SEND_BLOCKING: &[u8; 22] = b"SESSION_SEND_BLOCKING\0";
pub const SOLCLIENT_SESSION_PROP_SUBSCRIBE_BLOCKING: &[u8; 27] = b"SESSION_SUBSCRIBE_BLOCKING\0";
pub const SOLCLIENT_SESSION_PROP_BLOCK_WHILE_CONNECTING: &[u8; 31] =
    b"SESSION_BLOCK_WHILE_CONNECTING\0";
pub const SOLCLIENT_SESSION_PROP_BLOCKING_WRITE_TIMEOUT_MS: &[u8; 25] =
    b"SESSION_WRITE_TIMEOUT_MS\0";
pub const SOLCLIENT_SESSION_PROP_CONNECT_TIMEOUT_MS: &[u8; 27] = b"SESSION_CONNECT_TIMEOUT_MS\0";
pub const SOLCLIENT_SESSION_PROP_SUBCONFIRM_TIMEOUT_MS: &[u8; 30] =
    b"SESSION_SUBCONFIRM_TIMEOUT_MS\0";
pub const SOLCLIENT_SESSION_PROP_IGNORE_DUP_SUBSCRIPTION_ERROR: &[u8; 38] =
    b"SESSION_IGNORE_DUP_SUBSCRIPTION_ERROR\0";
pub const SOLCLIENT_SESSION_PROP_TCP_NODELAY: &[u8; 20] = b"SESSION_TCP_NODELAY\0";
pub const SOLCLIENT_SESSION_PROP_SOCKET_SEND_BUF_SIZE: &[u8; 29] =
    b"SESSION_SOCKET_SEND_BUF_SIZE\0";
pub const SOLCLIENT_SESSION_PROP_SOCKET_RCV_BUF_SIZE: &[u8; 28] = b"SESSION_SOCKET_RCV_BUF_SIZE\0";
pub const SOLCLIENT_SESSION_PROP_KEEP_ALIVE_INT_MS: &[u8; 31] = b"SESSION_KEEP_ALIVE_INTERVAL_MS\0";
pub const SOLCLIENT_SESSION_PROP_KEEP_ALIVE_LIMIT: &[u8; 25] = b"SESSION_KEEP_ALIVE_LIMIT\0";
pub const SOLCLIENT_SESSION_PROP_APPLICATION_DESCRIPTION: &[u8; 32] =
    b"SESSION_APPLICATION_DESCRIPTION\0";
pub const SOLCLIENT_SESSION_PROP_CLIENT_MODE: &[u8; 20] = b"SESSION_CLIENT_MODE\0";
pub const SOLCLIENT_SESSION_PROP_BIND_IP: &[u8; 16] = b"SESSION_BIND_IP\0";
pub const SOLCLIENT_SESSION_PROP_PUB_WINDOW_SIZE: &[u8; 24] = b"SESSION_PUB_WINDOW_SIZE\0";
pub const SOLCLIENT_SESSION_PROP_PUB_ACK_TIMER: &[u8; 22] = b"SESSION_PUB_ACK_TIMER\0";
pub const SOLCLIENT_SESSION_PROP_VPN_NAME: &[u8; 17] = b"SESSION_VPN_NAME\0";
pub const SOLCLIENT_SESSION_PROP_VPN_NAME_IN_USE: &[u8; 24] = b"SESSION_VPN_NAME_IN_USE\0";
pub const SOLCLIENT_SESSION_PROP_CLIENT_NAME: &[u8; 20] = b"SESSION_CLIENT_NAME\0";
pub const SOLCLIENT_SESSION_PROP_COMPRESSION_LEVEL: &[u8; 26] = b"SESSION_COMPRESSION_LEVEL\0";
pub const SOLCLIENT_SESSION_PROP_GENERATE_RCV_TIMESTAMPS: &[u8; 22] = b"SESSION_RCV_TIMESTAMP\0";
pub const SOLCLIENT_SESSION_PROP_GENERATE_SEND_TIMESTAMPS: &[u8; 23] = b"SESSION_SEND_TIMESTAMP\0";
pub const SOLCLIENT_SESSION_PROP_GENERATE_SENDER_ID: &[u8; 23] = b"SESSION_SEND_SENDER_ID\0";
pub const SOLCLIENT_SESSION_PROP_GENERATE_SEQUENCE_NUMBER: &[u8; 29] =
    b"SESSION_SEND_SEQUENCE_NUMBER\0";
pub const SOLCLIENT_SESSION_PROP_CONNECT_RETRIES_PER_HOST: &[u8; 33] =
    b"SESSION_CONNECT_RETRIES_PER_HOST\0";
pub const SOLCLIENT_SESSION_PROP_CONNECT_RETRIES: &[u8; 24] = b"SESSION_CONNECT_RETRIES\0";
pub const SOLCLIENT_SESSION_PROP_RECONNECT_RETRIES: &[u8; 26] = b"SESSION_RECONNECT_RETRIES\0";
pub const SOLCLIENT_SESSION_PROP_RECONNECT_RETRY_WAIT_MS: &[u8; 32] =
    b"SESSION_RECONNECT_RETRY_WAIT_MS\0";
pub const SOLCLIENT_SESSION_PROP_USER_ID: &[u8; 16] = b"SESSION_USER_ID\0";
pub const SOLCLIENT_SESSION_PROP_P2PINBOX_IN_USE: &[u8; 30] = b"SESSION_REPLY_TO_DEFAULT_DEST\0";
pub const SOLCLIENT_SESSION_PROP_REPLY_TO_DEFAULT_DEST: &[u8; 30] =
    b"SESSION_REPLY_TO_DEFAULT_DEST\0";
pub const SOLCLIENT_SESSION_PROP_REAPPLY_SUBSCRIPTIONS: &[u8; 30] =
    b"SESSION_REAPPLY_SUBSCRIPTIONS\0";
pub const SOLCLIENT_SESSION_PROP_TOPIC_DISPATCH: &[u8; 23] = b"SESSION_TOPIC_DISPATCH\0";
pub const SOLCLIENT_SESSION_PROP_PROVISION_TIMEOUT_MS: &[u8; 29] =
    b"SESSION_PROVISION_TIMEOUT_MS\0";
pub const SOLCLIENT_SESSION_PROP_CALCULATE_MESSAGE_EXPIRATION: &[u8; 37] =
    b"SESSION_CALCULATE_MESSAGE_EXPIRATION\0";
pub const SOLCLIENT_SESSION_PROP_VIRTUAL_ROUTER_NAME: &[u8; 28] = b"SESSION_VIRTUAL_ROUTER_NAME\0";
pub const SOLCLIENT_SESSION_PROP_NO_LOCAL: &[u8; 17] = b"SESSION_NO_LOCAL\0";
pub const SOLCLIENT_SESSION_PROP_AD_PUB_ROUTER_WINDOWED_ACK: &[u8; 35] =
    b"SESSION_AD_PUB_ROUTER_WINDOWED_ACK\0";
pub const SOLCLIENT_SESSION_PROP_MODIFYPROP_TIMEOUT_MS: &[u8; 30] =
    b"SESSION_MODIFYPROP_TIMEOUT_MS\0";
pub const SOLCLIENT_SESSION_PROP_ACK_EVENT_MODE: &[u8; 23] = b"SESSION_ACK_EVENT_MODE\0";
pub const SOLCLIENT_SESSION_PROP_SSL_EXCLUDED_PROTOCOLS: &[u8; 31] =
    b"SESSION_SSL_EXCLUDED_PROTOCOLS\0";
pub const SOLCLIENT_SESSION_PROP_SSL_VALIDATE_CERTIFICATE: &[u8; 33] =
    b"SESSION_SSL_VALIDATE_CERTIFICATE\0";
pub const SOLCLIENT_SESSION_PROP_OPENSSL_SECURITY_LEVEL: &[u8; 31] =
    b"SESSION_OPENSSL_SECURITY_LEVEL\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CLIENT_CERTIFICATE_FILE: &[u8; 36] =
    b"SESSION_SSL_CLIENT_CERTIFICATE_FILE\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CLIENT_PRIVATE_KEY_FILE: &[u8; 36] =
    b"SESSION_SSL_CLIENT_PRIVATE_KEY_FILE\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CLIENT_PRIVATE_KEY_FILE_PASSWORD: &[u8; 45] =
    b"SESSION_SSL_CLIENT_PRIVATE_KEY_FILE_PASSWORD\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CONNECTION_DOWNGRADE_TO: &[u8; 36] =
    b"SESSION_SSL_CONNECTION_DOWNGRADE_TO\0";
pub const SOLCLIENT_SESSION_PROP_INITIAL_RECEIVE_BUFFER_SIZE: &[u8; 36] =
    b"SESSION_INITIAL_RECEIVE_BUFFER_SIZE\0";
pub const SOLCLIENT_SESSION_PROP_AUTHENTICATION_SCHEME: &[u8; 30] =
    b"SESSION_AUTHENTICATION_SCHEME\0";
pub const SOLCLIENT_SESSION_PROP_KRB_SERVICE_NAME: &[u8; 25] = b"SESSION_KRB_SERVICE_NAME\0";
pub const SOLCLIENT_SESSION_PROP_UNBIND_FAIL_ACTION: &[u8; 27] = b"SESSION_UNBIND_FAIL_ACTION\0";
pub const SOLCLIENT_SESSION_PROP_WEB_TRANSPORT_PROTOCOL: &[u8; 31] =
    b"SESSION_WEB_TRANSPORT_PROTOCOL\0";
pub const SOLCLIENT_SESSION_PROP_WEB_TRANSPORT_PROTOCOL_IN_USE: &[u8; 38] =
    b"SESSION_WEB_TRANSPORT_PROTOCOL_IN_USE\0";
pub const SOLCLIENT_SESSION_PROP_WEB_TRANSPORT_PROTOCOL_LIST: &[u8; 36] =
    b"SESSION_WEB_TRANSPORT_PROTOCOL_LIST\0";
pub const SOLCLIENT_SESSION_PROP_TRANSPORT_PROTOCOL_DOWNGRADE_TIMEOUT_MS: &[u8; 48] =
    b"SESSION_TRANSPORT_PROTOCOL_DOWNGRADE_TIMEOUT_MS\0";
pub const SOLCLIENT_SESSION_PROP_GUARANTEED_WITH_WEB_TRANSPORT: &[u8; 38] =
    b"SESSION_GUARANTEED_WITH_WEB_TRANSPORT\0";
pub const SOLCLIENT_SESSION_PROP_GD_RECONNECT_FAIL_ACTION: &[u8; 33] =
    b"SESSION_GD_RECONNECT_FAIL_ACTION\0";
pub const SOLCLIENT_SESSION_PROP_OAUTH2_ACCESS_TOKEN: &[u8; 28] = b"SESSION_OAUTH2_ACCESS_TOKEN\0";
pub const SOLCLIENT_SESSION_PROP_OAUTH2_ISSUER_IDENTIFIER: &[u8; 33] =
    b"SESSION_OAUTH2_ISSUER_IDENTIFIER\0";
pub const SOLCLIENT_SESSION_PROP_OIDC_ID_TOKEN: &[u8; 22] = b"SESSION_OIDC_ID_TOKEN\0";
pub const SOLCLIENT_TRANSPORT_PROTOCOL_NULL: &[u8; 1] = b"\0";
pub const SOLCLIENT_TRANSPORT_PROTOCOL_WS_BINARY: &[u8; 10] = b"WS_BINARY\0";
pub const SOLCLIENT_TRANSPORT_PROTOCOL_HTTP_BINARY_STREAMING: &[u8; 22] =
    b"HTTP_BINARY_STREAMING\0";
pub const SOLCLIENT_TRANSPORT_PROTOCOL_HTTP_BINARY: &[u8; 12] = b"HTTP_BINARY\0";
pub const SOLCLIENT_TRANSPORT_PROTOCOL_PLAIN_TEXT: &[u8; 11] = b"PLAIN_TEXT\0";
pub const SOLCLIENT_SESSION_PROP_AUTHENTICATION_SCHEME_BASIC: &[u8; 28] =
    b"AUTHENTICATION_SCHEME_BASIC\0";
pub const SOLCLIENT_SESSION_PROP_AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: &[u8; 41] =
    b"AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE\0";
pub const SOLCLIENT_SESSION_PROP_AUTHENTICATION_SCHEME_GSS_KRB: &[u8; 30] =
    b"AUTHENTICATION_SCHEME_GSS_KRB\0";
pub const SOLCLIENT_SESSION_PROP_AUTHENTICATION_SCHEME_OAUTH2: &[u8; 29] =
    b"AUTHENTICATION_SCHEME_OAUTH2\0";
pub const SOLCLIENT_SESSION_PROP_UNBIND_FAIL_ACTION_RETRY: &[u8; 25] =
    b"UNBIND_FAIL_ACTION_RETRY\0";
pub const SOLCLIENT_SESSION_PROP_UNBIND_FAIL_ACTION_DISCONNECT: &[u8; 30] =
    b"UNBIND_FAIL_ACTION_DISCONNECT\0";
pub const SOLCLIENT_SESSION_PROP_SSL_VALIDATE_CERTIFICATE_DATE: &[u8; 38] =
    b"SESSION_SSL_VALIDATE_CERTIFICATE_DATE\0";
pub const SOLCLIENT_SESSION_PROP_SSL_VALIDATE_CERTIFICATE_HOST: &[u8; 38] =
    b"SESSION_SSL_VALIDATE_CERTIFICATE_HOST\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_SUITES: &[u8; 26] = b"SESSION_SSL_CIPHER_SUITES\0";
pub const SOLCLIENT_SESSION_PROP_SSL_TRUST_STORE_DIR: &[u8; 28] = b"SESSION_SSL_TRUST_STORE_DIR\0";
pub const SOLCLIENT_SESSION_PROP_SSL_TRUSTED_COMMON_NAME_LIST: &[u8; 37] =
    b"SESSION_SSL_TRUSTED_COMMON_NAME_LIST\0";
pub const SOLCLIENT_SESSION_PROP_GD_RECONNECT_FAIL_ACTION_AUTO_RETRY: &[u8; 36] =
    b"GD_RECONNECT_FAIL_ACTION_AUTO_RETRY\0";
pub const SOLCLIENT_SESSION_PROP_GD_RECONNECT_FAIL_ACTION_DISCONNECT: &[u8; 36] =
    b"GD_RECONNECT_FAIL_ACTION_DISCONNECT\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_USERNAME: &[u8; 1] = b"\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_PASSWORD: &[u8; 1] = b"\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_HOST: &[u8; 10] = b"127.0.0.1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_PORT: &[u8; 6] = b"55555\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_PORT_COMPRESSION: &[u8; 6] = b"55003\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_PORT_SSL: &[u8; 6] = b"55443\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_BUFFER_SIZE: &[u8; 6] = b"90000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_CONNECT_BLOCKING: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SEND_BLOCKING: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SUBSCRIBE_BLOCKING: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_BLOCK_WHILE_CONNECTING: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_BLOCKING_WRITE_TIMEOUT_MS: &[u8; 7] = b"100000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_CONNECT_TIMEOUT_MS: &[u8; 6] = b"30000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SUBCONFIRM_TIMEOUT_MS: &[u8; 6] = b"10000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_IGNORE_DUP_SUBSCRIPTION_ERROR: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_TCP_NODELAY: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SOCKET_SEND_BUF_SIZE: &[u8; 6] = b"90000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SOCKET_RCV_BUF_SIZE: &[u8; 7] = b"150000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_KEEP_ALIVE_INT_MS: &[u8; 5] = b"3000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_KEEP_ALIVE_LIMIT: &[u8; 2] = b"3\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_APPLICATION_DESCRIPTION: &[u8; 1] = b"\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_CLIENT_MODE: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_BIND_IP: &[u8; 1] = b"\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_PUB_ACK_TIMER: &[u8; 5] = b"2000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_PUB_WINDOW_SIZE: &[u8; 3] = b"50\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_VPN_NAME: &[u8; 1] = b"\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_CLIENT_NAME: &[u8; 1] = b"\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SUBSCRIBER_LOCAL_PRIORITY: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SUBSCRIBER_NETWORK_PRIORITY: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_COMPRESSION_LEVEL: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_GENERATE_RCV_TIMESTAMPS: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_GENERATE_SEND_TIMESTAMPS: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_GENERATE_SENDER_ID: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_GENERATE_SEQUENCE_NUMBER: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_CONNECT_RETRIES_PER_HOST: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_CONNECT_RETRIES: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_RECONNECT_RETRIES: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_RECONNECT_RETRY_WAIT_MS: &[u8; 5] = b"3000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_REAPPLY_SUBSCRIPTIONS: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_TOPIC_DISPATCH: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_PROVISION_TIMEOUT_MS: &[u8; 5] = b"3000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_MODIFYPROP_TIMEOUT_MS: &[u8; 6] = b"10000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_CALCULATE_EXPIRATION_TIME: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_NO_LOCAL: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_AD_PUB_ROUTER_WINDOWED_ACK: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SSL_EXCLUDED_PROTOCOLS: &[u8; 1] = b"\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SSL_VALIDATE_CERTIFICATE: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SSL_VALIDATE_CERTIFICATE_DATE: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SSL_VALIDATE_CERTIFICATE_HOST: &[u8; 2] = b"1\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_SSL_CIPHER_SUITES : & [u8 ; 284] = b"ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-RSA-AES256-SHA,AES256-GCM-SHA384,AES256-SHA256,AES256-SHA,ECDHE-RSA-DES-CBC3-SHA,DES-CBC3-SHA,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-SHA256,ECDHE-RSA-AES128-SHA,AES128-GCM-SHA256,AES128-SHA256,AES128-SHA,RC4-SHA,RC4-MD5\0" ;
pub const SOLCLIENT_SESSION_PROP_DEFAULT_INITIAL_RECEIVE_BUFFER_SIZE: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_AUTHENTICATION_SCHEME: &[u8; 28] =
    b"AUTHENTICATION_SCHEME_BASIC\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_KRB_SERVICE_NAME: &[u8; 7] = b"solace\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_UNBIND_FAIL_ACTION: &[u8; 25] =
    b"UNBIND_FAIL_ACTION_RETRY\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_WEB_TRANSPORT_PROTOCOL: &[u8; 1] = b"\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_TRANSPORT_PROTOCOL_DOWNGRADE_TIMEOUT_MS: &[u8; 5] =
    b"3000\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_GUARANTEED_WITH_WEB_TRANSPORT: &[u8; 2] = b"0\0";
pub const SOLCLIENT_SESSION_PROP_DEFAULT_GD_RECONNECT_FAIL_ACTION: &[u8; 36] =
    b"GD_RECONNECT_FAIL_ACTION_AUTO_RETRY\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_ECDHE_RSA_AES256_GCM_SHA384: &[u8; 28] =
    b"ECDHE-RSA-AES256-GCM-SHA384\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: &[u8; 38] =
    b"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_ECDHE_RSA_AES256_SHA384: &[u8; 24] =
    b"ECDHE-RSA-AES256-SHA384\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: &[u8; 38] =
    b"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_ECDHE_RSA_AES256_SHA: &[u8; 21] =
    b"ECDHE-RSA-AES256-SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: &[u8; 35] =
    b"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_AES256_GCM_SHA384: &[u8; 18] = b"AES256-GCM-SHA384\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_RSA_WITH_AES_256_GCM_SHA384: &[u8; 32] =
    b"TLS_RSA_WITH_AES_256_GCM_SHA384\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_AES256_SHA256: &[u8; 14] = b"AES256-SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_RSA_WITH_AES_256_CBC_SHA256: &[u8; 32] =
    b"TLS_RSA_WITH_AES_256_CBC_SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_AES256_SHA: &[u8; 11] = b"AES256-SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_RSA_WITH_AES_256_CBC_SHA: &[u8; 29] =
    b"TLS_RSA_WITH_AES_256_CBC_SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_ECDHE_RSA_DES_CBC3_SHA: &[u8; 23] =
    b"ECDHE-RSA-DES-CBC3-SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: &[u8; 36] =
    b"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_DES_CBC3_SHA: &[u8; 13] = b"DES-CBC3-SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_SSL_RSA_WITH_3DES_EDE_CBC_SHA: &[u8; 30] =
    b"SSL_RSA_WITH_3DES_EDE_CBC_SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_ECDHE_RSA_AES128_GCM_SHA256: &[u8; 28] =
    b"ECDHE-RSA-AES128-GCM-SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: &[u8; 38] =
    b"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_ECDHE_RSA_AES128_SHA256: &[u8; 24] =
    b"ECDHE-RSA-AES128-SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: &[u8; 38] =
    b"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_ECDHE_RSA_AES128_SHA: &[u8; 21] =
    b"ECDHE-RSA-AES128-SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: &[u8; 35] =
    b"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_AES128_GCM_SHA256: &[u8; 18] = b"AES128-GCM-SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_RSA_WITH_AES_128_GCM_SHA256: &[u8; 32] =
    b"TLS_RSA_WITH_AES_128_GCM_SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_AES128_SHA256: &[u8; 14] = b"AES128-SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_RSA_WITH_AES_128_CBC_SHA256: &[u8; 32] =
    b"TLS_RSA_WITH_AES_128_CBC_SHA256\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_AES128_SHA: &[u8; 11] = b"AES128-SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_TLS_RSA_WITH_AES_128_CBC_SHA: &[u8; 29] =
    b"TLS_RSA_WITH_AES_128_CBC_SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_RC4_SHA: &[u8; 8] = b"RC4-SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_SSL_RSA_WITH_RC4_128_SHA: &[u8; 25] =
    b"SSL_RSA_WITH_RC4_128_SHA\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_RC4_MD5: &[u8; 8] = b"RC4-MD5\0";
pub const SOLCLIENT_SESSION_PROP_SSL_CIPHER_SSL_RSA_WITH_RC4_128_MD5: &[u8; 25] =
    b"SSL_RSA_WITH_RC4_128_MD5\0";
pub const SOLCLIENT_SESSION_PROP_SSL_PROTOCOL_TLSV1_2: &[u8; 8] = b"TLSv1.2\0";
pub const SOLCLIENT_SESSION_PROP_SSL_PROTOCOL_TLSV1_1: &[u8; 8] = b"TLSv1.1\0";
pub const SOLCLIENT_SESSION_PROP_SSL_PROTOCOL_TLSV1: &[u8; 6] = b"TLSv1\0";
pub const SOLCLIENT_SESSION_PROP_SSL_PROTOCOL_SSLV3: &[u8; 6] = b"SSLv3\0";
pub const SOLCLIENT_SESSION_PROP_MAX_USERNAME_LEN: u32 = 189;
pub const SOLCLIENT_SESSION_PROP_MAX_PASSWORD_LEN: u32 = 128;
pub const SOLCLIENT_SESSION_PROP_MAX_HOSTS: u32 = 16;
pub const SOLCLIENT_SESSION_PROP_MAX_APP_DESC: u32 = 255;
pub const SOLCLIENT_SESSION_PROP_MAX_CLIENT_NAME_LEN: u32 = 160;
pub const SOLCLIENT_SESSION_PROP_MAX_VPN_NAME_LEN: u32 = 32;
pub const SOLCLIENT_SESSION_PROP_MAX_VIRTUAL_ROUTER_NAME_LEN: u32 = 52;
pub const SOLCLIENT_FLOW_PROP_BIND_BLOCKING: &[u8; 19] = b"FLOW_BIND_BLOCKING\0";
pub const SOLCLIENT_FLOW_PROP_BIND_TIMEOUT_MS: &[u8; 21] = b"FLOW_BIND_TIMEOUT_MS\0";
pub const SOLCLIENT_FLOW_PROP_BIND_ENTITY_ID: &[u8; 20] = b"FLOW_BIND_ENTITY_ID\0";
pub const SOLCLIENT_FLOW_PROP_BIND_ENTITY_DURABLE: &[u8; 25] = b"FLOW_BIND_ENTITY_DURABLE\0";
pub const SOLCLIENT_FLOW_PROP_BIND_NAME: &[u8; 15] = b"FLOW_BIND_NAME\0";
pub const SOLCLIENT_FLOW_PROP_WINDOWSIZE: &[u8; 16] = b"FLOW_WINDOWSIZE\0";
pub const SOLCLIENT_FLOW_PROP_AUTOACK: &[u8; 13] = b"FLOW_AUTOACK\0";
pub const SOLCLIENT_FLOW_PROP_ACKMODE: &[u8; 13] = b"FLOW_ACKMODE\0";
pub const SOLCLIENT_FLOW_PROP_TOPIC: &[u8; 11] = b"FLOW_TOPIC\0";
pub const SOLCLIENT_FLOW_PROP_MAX_BIND_TRIES: &[u8; 20] = b"FLOW_MAX_BIND_TRIES\0";
pub const SOLCLIENT_FLOW_PROP_ACK_TIMER_MS: &[u8; 18] = b"FLOW_ACK_TIMER_MS\0";
pub const SOLCLIENT_FLOW_PROP_ACK_THRESHOLD: &[u8; 19] = b"FLOW_ACK_THRESHOLD\0";
pub const SOLCLIENT_FLOW_PROP_START_STATE: &[u8; 17] = b"FLOW_START_STATE\0";
pub const SOLCLIENT_FLOW_PROP_SELECTOR: &[u8; 14] = b"FLOW_SELECTOR\0";
pub const SOLCLIENT_FLOW_PROP_NO_LOCAL: &[u8; 14] = b"FLOW_NO_LOCAL\0";
pub const SOLCLIENT_FLOW_PROP_MAX_UNACKED_MESSAGES: &[u8; 26] = b"FLOW_MAX_UNACKED_MESSAGES\0";
pub const SOLCLIENT_FLOW_PROP_BROWSER: &[u8; 13] = b"FLOW_BROWSER\0";
pub const SOLCLIENT_FLOW_PROP_ACTIVE_FLOW_IND: &[u8; 21] = b"FLOW_ACTIVE_FLOW_IND\0";
pub const SOLCLIENT_FLOW_PROP_REPLAY_START_LOCATION: &[u8; 27] = b"FLOW_REPLAY_START_LOCATION\0";
pub const SOLCLIENT_FLOW_PROP_MAX_RECONNECT_TRIES: &[u8; 25] = b"FLOW_MAX_RECONNECT_TRIES\0";
pub const SOLCLIENT_FLOW_PROP_RECONNECT_RETRY_INTERVAL_MS: &[u8; 33] =
    b"FLOW_RECONNECT_RETRY_INTERVAL_MS\0";
pub const SOLCLIENT_FLOW_PROP_REQUIRED_OUTCOME_FAILED: &[u8; 29] =
    b"FLOW_REQUIRED_OUTCOME_FAILED\0";
pub const SOLCLIENT_FLOW_PROP_REQUIRED_OUTCOME_REJECTED: &[u8; 31] =
    b"FLOW_REQUIRED_OUTCOME_REJECTED\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_BIND_BLOCKING: &[u8; 2] = b"1\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_BIND_TIMEOUT_MS: &[u8; 6] = b"10000\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_BIND_ENTITY_DURABLE: &[u8; 2] = b"1\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_BIND_NAME: &[u8; 1] = b"\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_WINDOWSIZE: &[u8; 4] = b"255\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_AUTOACK: &[u8; 2] = b"1\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_TOPIC: &[u8; 1] = b"\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_MAX_BIND_TRIES: &[u8; 2] = b"3\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_ACK_TIMER_MS: &[u8; 5] = b"1000\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_ACK_THRESHOLD: &[u8; 3] = b"60\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_START_STATE: &[u8; 2] = b"1\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_SELECTOR: &[u8; 1] = b"\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_NO_LOCAL: &[u8; 2] = b"0\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_MAX_UNACKED_MESSAGES: &[u8; 3] = b"-1\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_BROWSER: &[u8; 2] = b"0\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_ACTIVE_FLOW_IND: &[u8; 2] = b"0\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_REPLAY_START_LOCATION: &[u8; 1] = b"\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_MAX_RECONNECT_TRIES: &[u8; 3] = b"-1\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_RECONNECT_RETRY_INTERVAL_MS: &[u8; 5] = b"3000\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_REQUIRED_OUTCOME_FAILED: &[u8; 2] = b"0\0";
pub const SOLCLIENT_FLOW_PROP_DEFAULT_REQUIRED_OUTCOME_REJECTED: &[u8; 2] = b"0\0";
pub const SOLCLIENT_FLOW_PROP_BIND_ENTITY_SUB: &[u8; 2] = b"1\0";
pub const SOLCLIENT_FLOW_PROP_BIND_ENTITY_QUEUE: &[u8; 2] = b"2\0";
pub const SOLCLIENT_FLOW_PROP_BIND_ENTITY_TE: &[u8; 2] = b"3\0";
pub const SOLCLIENT_FLOW_PROP_BIND_ENTITY_DTE: &[u8; 2] = b"3\0";
pub const SOLCLIENT_FLOW_PROP_ACKMODE_AUTO: &[u8; 2] = b"1\0";
pub const SOLCLIENT_FLOW_PROP_ACKMODE_CLIENT: &[u8; 2] = b"2\0";
pub const SOLCLIENT_ENDPOINT_PROP_ID: &[u8; 12] = b"ENDPOINT_ID\0";
pub const SOLCLIENT_ENDPOINT_PROP_NAME: &[u8; 14] = b"ENDPOINT_NAME\0";
pub const SOLCLIENT_ENDPOINT_PROP_DURABLE: &[u8; 17] = b"ENDPOINT_DURABLE\0";
pub const SOLCLIENT_ENDPOINT_PROP_PERMISSION: &[u8; 20] = b"ENDPOINT_PERMISSION\0";
pub const SOLCLIENT_ENDPOINT_PROP_ACCESSTYPE: &[u8; 20] = b"ENDPOINT_ACCESSTYPE\0";
pub const SOLCLIENT_ENDPOINT_PROP_QUOTA_MB: &[u8; 18] = b"ENDPOINT_QUOTA_MB\0";
pub const SOLCLIENT_ENDPOINT_PROP_MAXMSG_SIZE: &[u8; 21] = b"ENDPOINT_MAXMSG_SIZE\0";
pub const SOLCLIENT_ENDPOINT_PROP_RESPECTS_MSG_TTL: &[u8; 26] = b"ENDPOINT_RESPECTS_MSG_TTL\0";
pub const SOLCLIENT_ENDPOINT_PROP_DISCARD_BEHAVIOR: &[u8; 26] = b"ENDPOINT_DISCARD_BEHAVIOR\0";
pub const SOLCLIENT_ENDPOINT_PROP_MAXMSG_REDELIVERY: &[u8; 27] = b"ENDPOINT_MAXMSG_REDELIVERY\0";
pub const SOLCLIENT_ENDPOINT_PROP_DEFAULT_DURABLE: &[u8; 2] = b"1\0";
pub const SOLCLIENT_ENDPOINT_PROP_DEFAULT_RESPECTS_MSG_TTL: &[u8; 2] = b"0\0";
pub const SOLCLIENT_ENDPOINT_PROP_QUEUE: &[u8; 2] = b"2\0";
pub const SOLCLIENT_ENDPOINT_PROP_TE: &[u8; 2] = b"3\0";
pub const SOLCLIENT_ENDPOINT_PROP_CLIENT_NAME: &[u8; 2] = b"4\0";
pub const SOLCLIENT_ENDPOINT_PROP_ACCESSTYPE_NONEXCLUSIVE: &[u8; 2] = b"0\0";
pub const SOLCLIENT_ENDPOINT_PROP_ACCESSTYPE_EXCLUSIVE: &[u8; 2] = b"1\0";
pub const SOLCLIENT_ENDPOINT_PERM_NONE: &[u8; 2] = b"n\0";
pub const SOLCLIENT_ENDPOINT_PERM_READ_ONLY: &[u8; 2] = b"r\0";
pub const SOLCLIENT_ENDPOINT_PERM_CONSUME: &[u8; 2] = b"c\0";
pub const SOLCLIENT_ENDPOINT_PERM_MODIFY_TOPIC: &[u8; 2] = b"m\0";
pub const SOLCLIENT_ENDPOINT_PERM_DELETE: &[u8; 2] = b"d\0";
pub const SOLCLIENT_ENDPOINT_PROP_DISCARD_NOTIFY_SENDER_ON: &[u8; 2] = b"1\0";
pub const SOLCLIENT_ENDPOINT_PROP_DISCARD_NOTIFY_SENDER_OFF: &[u8; 2] = b"2\0";
pub const SOLCLIENT_PROVISION_FLAGS_WAITFORCONFIRM: u32 = 1;
pub const SOLCLIENT_PROVISION_FLAGS_IGNORE_EXIST_ERRORS: u32 = 2;
pub const SOLCLIENT_FLOW_PROP_REPLAY_START_LOCATION_BEGINNING: &[u8; 10] = b"BEGINNING\0";
pub const SOLCLIENT_SESSION_CAPABILITY_PUB_GUARANTEED: &[u8; 34] =
    b"SESSION_CAPABILITY_PUB_GUARANTEED\0";
pub const SOLCLIENT_SESSION_CAPABILITY_SUB_FLOW_GUARANTEED: &[u8; 39] =
    b"SESSION_CAPABILITY_SUB_FLOW_GUARANTEED\0";
pub const SOLCLIENT_SESSION_CAPABILITY_BROWSER: &[u8; 27] = b"SESSION_CAPABILITY_BROWSER\0";
pub const SOLCLIENT_SESSION_CAPABILITY_TEMP_ENDPOINT: &[u8; 33] =
    b"SESSION_CAPABILITY_TEMP_ENDPOINT\0";
pub const SOLCLIENT_SESSION_CAPABILITY_JNDI: &[u8; 24] = b"SESSION_CAPABILITY_JNDI\0";
pub const SOLCLIENT_SESSION_CAPABILITY_COMPRESSION: &[u8; 31] = b"SESSION_CAPABILITY_COMPRESSION\0";
pub const SOLCLIENT_SESSION_CAPABILITY_SELECTOR: &[u8; 28] = b"SESSION_CAPABILITY_SELECTOR\0";
pub const SOLCLIENT_SESSION_CAPABILITY_ENDPOINT_MANAGEMENT: &[u8; 39] =
    b"SESSION_CAPABILITY_ENDPOINT_MANAGEMENT\0";
pub const SOLCLIENT_SESSION_PEER_PLATFORM: &[u8; 22] = b"SESSION_PEER_PLATFORM\0";
pub const SOLCLIENT_SESSION_PEER_SOFTWARE_DATE: &[u8; 27] = b"SESSION_PEER_SOFTWARE_DATE\0";
pub const SOLCLIENT_SESSION_PEER_SOFTWARE_VERSION: &[u8; 30] = b"SESSION_PEER_SOFTWARE_VERSION\0";
pub const SOLCLIENT_SESSION_PEER_PORT_SPEED: &[u8; 24] = b"SESSION_PEER_PORT_SPEED\0";
pub const SOLCLIENT_SESSION_PEER_PORT_TYPE: &[u8; 23] = b"SESSION_PEER_PORT_TYPE\0";
pub const SOLCLIENT_SESSION_PEER_ROUTER_NAME: &[u8; 25] = b"SESSION_PEER_ROUTER_NAME\0";
pub const SOLCLIENT_SESSION_CAPABILITY_MAX_GUARANTEED_MSG_SIZE: &[u8; 43] =
    b"SESSION_CAPABILITY_MAX_GUARANTEED_MSG_SIZE\0";
pub const SOLCLIENT_SESSION_CAPABILITY_MAX_DIRECT_MSG_SIZE: &[u8; 39] =
    b"SESSION_CAPABILITY_MAX_DIRECT_MSG_SIZE\0";
pub const SOLCLIENT_SESSION_CAPABILITY_ENDPOINT_MESSAGE_TTL: &[u8; 40] =
    b"SESSION_CAPABILITY_ENDPOINT_MESSAGE_TTL\0";
pub const SOLCLIENT_SESSION_CAPABILITY_QUEUE_SUBSCRIPTIONS: &[u8; 39] =
    b"SESSION_CAPABILITY_QUEUE_SUBSCRIPTIONS\0";
pub const SOLCLIENT_SESSION_CAPABILITY_SUBSCRIPTION_MANAGER: &[u8; 40] =
    b"SESSION_CAPABILITY_SUBSCRIPTION_MANAGER\0";
pub const SOLCLIENT_SESSION_CAPABILITY_MESSAGE_ELIDING: &[u8; 35] =
    b"SESSION_CAPABILITY_MESSAGE_ELIDING\0";
pub const SOLCLIENT_SESSION_CAPABILITY_NO_LOCAL: &[u8; 28] = b"SESSION_CAPABILITY_NO_LOCAL\0";
pub const SOLCLIENT_SESSION_CAPABILITY_PER_TOPIC_SEQUENCE_NUMBERING: &[u8; 48] =
    b"SESSION_CAPABILITY_PER_TOPIC_SEQUENCE_NUMBERING\0";
pub const SOLCLIENT_SESSION_CAPABILITY_ENDPOINT_DISCARD_BEHAVIOR: &[u8; 45] =
    b"SESSION_CAPABILITY_ENDPOINT_DISCARD_BEHAVIOR\0";
pub const SOLCLIENT_SESSION_CAPABILITY_ACTIVE_FLOW_INDICATION: &[u8; 42] =
    b"SESSION_CAPABILITY_ACTIVE_FLOW_INDICATION\0";
pub const SOLCLIENT_SESSION_CAPABILITY_TRANSACTED_SESSION: &[u8; 38] =
    b"SESSION_CAPABILITY_TRANSACTED_SESSION\0";
pub const SOLCLIENT_SESSION_CAPABILITY_OPENMAMA: &[u8; 28] = b"SESSION_CAPABILITY_OPENMAMA\0";
pub const SOLCLIENT_SESSION_CAPABILITY_MESSAGE_REPLAY: &[u8; 34] =
    b"SESSION_CAPABILITY_MESSAGE_REPLAY\0";
pub const SOLCLIENT_SESSION_CAPABILITY_COMPRESSED_SSL: &[u8; 34] =
    b"SESSION_CAPABILITY_COMPRESSED_SSL\0";
pub const SOLCLIENT_SESSION_CAPABILITY_LONG_SELECTORS: &[u8; 34] =
    b"SESSION_CAPABILITY_LONG_SELECTORS\0";
pub const SOLCLIENT_SESSION_CAPABILITY_SHARED_SUBSCRIPTIONS: &[u8; 40] =
    b"SESSION_CAPABILITY_SHARED_SUBSCRIPTIONS\0";
pub const SOLCLIENT_SESSION_CAPABILITY_BR_REPLAY_ERRORID: &[u8; 37] =
    b"SESSION_CAPABILITY_BR_REPLAY_ERRORID\0";
pub const SOLCLIENT_SESSION_CAPABILITY_AD_APP_ACK_FAILED: &[u8; 37] =
    b"SESSION_CAPABILITY_AD_APP_ACK_FAILED\0";
pub const SOLCLIENT_SESSION_CAPABILITY_VAR_LEN_EXT_PARAM: &[u8; 37] =
    b"SESSION_CAPABILITY_VAR_LEN_EXT_PARAM\0";
pub const SOLCLIENT_SESSION_CAPABILITY_ADCTRL_VERSION_MIN: &[u8; 38] =
    b"SESSION_CAPABILITY_ADCTRL_VERSION_MIN\0";
pub const SOLCLIENT_SESSION_CAPABILITY_ADCTRL_VERSION_MAX: &[u8; 38] =
    b"SESSION_CAPABILITY_ADCTRL_VERSION_MAX\0";
pub const SOLCLIENT_TRANSACTEDSESSION_PROP_HAS_PUBLISHER: &[u8; 32] =
    b"TRANSACTEDSESSION_HAS_PUBLISHER\0";
pub const SOLCLIENT_TRANSACTEDSESSION_PROP_CREATE_MESSAGE_DISPATCHER: &[u8; 44] =
    b"TRANSACTEDSESSION_CREATE_MESSAGE_DISPATCHER\0";
pub const SOLCLIENT_TRANSACTEDSESSION_PROP_REQUESTREPLY_TIMEOUT_MS: &[u8; 42] =
    b"TRANSACTEDSESSION_REQUESTREPLY_TIMEOUT_MS\0";
pub const SOLCLIENT_TRANSACTEDSESSION_PROP_PUB_WINDOW_SIZE: &[u8; 34] =
    b"TRANSACTEDSESSION_PUB_WINDOW_SIZE\0";
pub const SOLCLIENT_TRANSACTEDSESSION_PROP_DEFAULT_HAS_PUBLISHER: &[u8; 2] = b"1\0";
pub const SOLCLIENT_TRANSACTEDSESSION_PROP_DEFAULT_CREATE_MESSAGE_DISPATCHER: &[u8; 2] = b"0\0";
pub const SOLCLIENT_TRANSACTEDSESSION_PROP_DEFAULT_REQUESTREPLY_TIMEOUT_MS: &[u8; 6] = b"10000\0";
pub const SOLCLIENT_TRANSACTEDSESSION_PROP_DEFAULT_PUB_WINDOW_SIZE: &[u8; 4] = b"255\0";
pub const SOLCLIENT_MESSAGE_USER_PROP_QUEUE_PARTITION_KEY: &[u8; 12] = b"JMSXGroupID\0";
pub const SOLCLIENT_ERRORINFO_STR_SIZE: u32 = 256;
pub const SOLCLIENT_BUFINFO_MAX_USER_DATA_SIZE: u32 = 36;
pub const SOLCLIENT_BUFINFO_MAX_CORRELATION_TAG_SIZE: u32 = 16;
pub const SOLCLIENT_BUFINFO_MAX_TOPIC_SIZE: u32 = 250;
pub const SOLCLIENT_BUFINFO_MAX_QUEUENAME_SIZE: u32 = 250;
pub const SOLCLIENT_SESSION_SEND_MULTIPLE_LIMIT: u32 = 50;
pub const SOLCLIENT_CONTEXT_TIMER_ID_INVALID: u32 = 4294967295;
pub const SOLCLIENT_TRANSACTEDSESSION_MAX_SESSION_NAME_LENGTH: u32 = 64;
pub const SOLCLIENT_MSG_NUMDBQUANTA: u32 = 5;
pub const SOLCLIENT_MSGDUMP_BRIEF: u32 = 0;
pub const SOLCLIENT_MSGDUMP_FULL: u32 = 1;
pub const SOLCLIENT_REPLICATION_GROUP_MESSAGE_ID_SIZE: u32 = 16;
pub const SOLCLIENT_REPLICATION_GROUP_MESSAGE_ID_STRING_LENGTH: u32 = 41;
pub const SOLCLIENT_CACHESESSION_PROP_CACHE_NAME: &[u8; 24] = b"CACHESESSION_CACHE_NAME\0";
pub const SOLCLIENT_CACHESESSION_PROP_MAX_MSGS: &[u8; 22] = b"CACHESESSION_MAX_MSGS\0";
pub const SOLCLIENT_CACHESESSION_PROP_MAX_AGE: &[u8; 21] = b"CACHESESSION_MAX_AGE\0";
pub const SOLCLIENT_CACHESESSION_PROP_REQUESTREPLY_TIMEOUT_MS: &[u8; 27] =
    b"CACHESESSION_RR_TIMEOUT_MS\0";
pub const SOLCLIENT_CACHESESSION_PROP_REPLY_TO: &[u8; 22] = b"CACHESESSION_REPLY_TO\0";
pub const SOLCLIENT_CACHESESSION_PROP_DEFAULT_CACHE_NAME: &[u8; 1] = b"\0";
pub const SOLCLIENT_CACHESESSION_PROP_DEFAULT_MAX_MSGS: &[u8; 2] = b"1\0";
pub const SOLCLIENT_CACHESESSION_PROP_DEFAULT_MAX_AGE: &[u8; 2] = b"0\0";
pub const SOLCLIENT_CACHESESSION_PROP_DEFAULT_REQUESTREPLY_TIMEOUT_MS: &[u8; 6] = b"10000\0";
pub const SOLCLIENT_CACHESESSION_PROP_DEFAULT_REPLY_TO: &[u8; 1] = b"\0";
pub const SOLCLIENT_CACHESESSION_MAX_CACHE_NAME_SIZE: u32 = 200;
pub const SOLCLIENT_CACHEREQUEST_FLAGS_NO_SUBSCRIBE: u32 = 1;
pub const SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_FULFILL: u32 = 2;
pub const SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_QUEUE: u32 = 4;
pub const SOLCLIENT_CACHEREQUEST_FLAGS_LIVEDATA_FLOWTHRU: u32 = 8;
pub const SOLCLIENT_CACHEREQUEST_FLAGS_NOWAIT_REPLY: u32 = 16;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type wint_t = __darwin_wint_t;
pub type solClient_uint8_t = ::std::os::raw::c_uchar;
pub type solClient_int8_t = ::std::os::raw::c_schar;
pub type solClient_uint16_t = ::std::os::raw::c_ushort;
pub type solClient_int16_t = ::std::os::raw::c_short;
pub type solClient_bool_t = ::std::os::raw::c_uchar;
pub type solClient_wchar_t = wint_t;
pub type solClient_int32_t = ::std::os::raw::c_int;
pub type solClient_uint32_t = ::std::os::raw::c_uint;
pub type solClient_propertyArray_pt = *mut *const ::std::os::raw::c_char;
pub type solClient_int64_t = ::std::os::raw::c_longlong;
pub type solClient_uint64_t = ::std::os::raw::c_ulonglong;
pub type solClient_opaqueContext_pt = *mut ::std::os::raw::c_void;
pub type solClient_opaqueSession_pt = *mut ::std::os::raw::c_void;
pub type solClient_opaqueFlow_pt = *mut ::std::os::raw::c_void;
pub type solClient_opaqueMsg_pt = *mut ::std::os::raw::c_void;
pub type solClient_opaqueContainer_pt = *mut ::std::os::raw::c_void;
pub type solClient_opaqueDatablock_pt = *mut ::std::os::raw::c_void;
pub type solClient_opaqueTransactedSession_pt = *mut ::std::os::raw::c_void;
pub type solClient_opaquePointer_pt = *mut *mut ::std::os::raw::c_void;
pub const solClient_destinationType_SOLCLIENT_NULL_DESTINATION: solClient_destinationType = -1;
pub const solClient_destinationType_SOLCLIENT_TOPIC_DESTINATION: solClient_destinationType = 0;
pub const solClient_destinationType_SOLCLIENT_QUEUE_DESTINATION: solClient_destinationType = 1;
pub const solClient_destinationType_SOLCLIENT_TOPIC_TEMP_DESTINATION: solClient_destinationType = 2;
pub const solClient_destinationType_SOLCLIENT_QUEUE_TEMP_DESTINATION: solClient_destinationType = 3;
pub type solClient_destinationType = ::std::os::raw::c_int;
pub use self::solClient_destinationType as solClient_destinationType_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_destination {
    pub destType: solClient_destinationType_t,
    pub dest: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_solClient_destination() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_destination> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_destination>(),
        16usize,
        concat!("Size of: ", stringify!(solClient_destination))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_destination>(),
        8usize,
        concat!("Alignment of ", stringify!(solClient_destination))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_destination),
            "::",
            stringify!(destType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_destination),
            "::",
            stringify!(dest)
        )
    );
}
impl Default for solClient_destination {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_destination_t = solClient_destination;
pub const solClient_fieldType_SOLCLIENT_BOOL: solClient_fieldType = 0;
pub const solClient_fieldType_SOLCLIENT_UINT8: solClient_fieldType = 1;
pub const solClient_fieldType_SOLCLIENT_INT8: solClient_fieldType = 2;
pub const solClient_fieldType_SOLCLIENT_UINT16: solClient_fieldType = 3;
pub const solClient_fieldType_SOLCLIENT_INT16: solClient_fieldType = 4;
pub const solClient_fieldType_SOLCLIENT_UINT32: solClient_fieldType = 5;
pub const solClient_fieldType_SOLCLIENT_INT32: solClient_fieldType = 6;
pub const solClient_fieldType_SOLCLIENT_UINT64: solClient_fieldType = 7;
pub const solClient_fieldType_SOLCLIENT_INT64: solClient_fieldType = 8;
pub const solClient_fieldType_SOLCLIENT_WCHAR: solClient_fieldType = 9;
pub const solClient_fieldType_SOLCLIENT_STRING: solClient_fieldType = 10;
pub const solClient_fieldType_SOLCLIENT_BYTEARRAY: solClient_fieldType = 11;
pub const solClient_fieldType_SOLCLIENT_FLOAT: solClient_fieldType = 12;
pub const solClient_fieldType_SOLCLIENT_DOUBLE: solClient_fieldType = 13;
pub const solClient_fieldType_SOLCLIENT_MAP: solClient_fieldType = 14;
pub const solClient_fieldType_SOLCLIENT_STREAM: solClient_fieldType = 15;
pub const solClient_fieldType_SOLCLIENT_NULL: solClient_fieldType = 16;
pub const solClient_fieldType_SOLCLIENT_DESTINATION: solClient_fieldType = 17;
pub const solClient_fieldType_SOLCLIENT_SMF: solClient_fieldType = 18;
pub const solClient_fieldType_SOLCLIENT_UNKNOWN: solClient_fieldType = -1;
pub type solClient_fieldType = ::std::os::raw::c_int;
pub use self::solClient_fieldType as solClient_fieldType_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct solClient_field {
    pub type_: solClient_fieldType_t,
    pub length: solClient_uint32_t,
    pub value: solClient_field__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union solClient_field__bindgen_ty_1 {
    pub boolean: solClient_bool_t,
    pub uint8: solClient_uint8_t,
    pub int8: solClient_int8_t,
    pub uint16: solClient_uint16_t,
    pub int16: solClient_int16_t,
    pub uint32: solClient_uint32_t,
    pub int32: solClient_int32_t,
    pub uint64: solClient_uint64_t,
    pub int64: solClient_int64_t,
    pub wchar: solClient_wchar_t,
    pub float32: f32,
    pub float64: f64,
    pub string: *const ::std::os::raw::c_char,
    pub bytearray: *mut solClient_uint8_t,
    pub map: solClient_opaqueContainer_pt,
    pub stream: solClient_opaqueContainer_pt,
    pub dest: solClient_destination_t,
    pub smf: *mut solClient_uint8_t,
    pub unknownField: *mut solClient_uint8_t,
}
#[test]
fn bindgen_test_layout_solClient_field__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_field__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_field__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(solClient_field__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_field__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(solClient_field__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolean) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(boolean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(uint8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(int8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(uint16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(int16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(uint32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(uint64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(int64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(float32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(float64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytearray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(bytearray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(smf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknownField) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field__bindgen_ty_1),
            "::",
            stringify!(unknownField)
        )
    );
}
impl Default for solClient_field__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_solClient_field() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_field> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_field>(),
        24usize,
        concat!("Size of: ", stringify!(solClient_field))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_field>(),
        8usize,
        concat!("Alignment of ", stringify!(solClient_field))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_field),
            "::",
            stringify!(value)
        )
    );
}
impl Default for solClient_field {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_field_t = solClient_field;
pub const solClient_returnCode_SOLCLIENT_OK: solClient_returnCode = 0;
pub const solClient_returnCode_SOLCLIENT_WOULD_BLOCK: solClient_returnCode = 1;
pub const solClient_returnCode_SOLCLIENT_IN_PROGRESS: solClient_returnCode = 2;
pub const solClient_returnCode_SOLCLIENT_NOT_READY: solClient_returnCode = 3;
pub const solClient_returnCode_SOLCLIENT_EOS: solClient_returnCode = 4;
pub const solClient_returnCode_SOLCLIENT_NOT_FOUND: solClient_returnCode = 5;
pub const solClient_returnCode_SOLCLIENT_NOEVENT: solClient_returnCode = 6;
pub const solClient_returnCode_SOLCLIENT_INCOMPLETE: solClient_returnCode = 7;
pub const solClient_returnCode_SOLCLIENT_ROLLBACK: solClient_returnCode = 8;
pub const solClient_returnCode_SOLCLIENT_FAIL: solClient_returnCode = -1;
pub type solClient_returnCode = ::std::os::raw::c_int;
pub use self::solClient_returnCode as solClient_returnCode_t;
pub const solClient_rxMsgCallback_returnCode_SOLCLIENT_CALLBACK_OK:
    solClient_rxMsgCallback_returnCode = 0;
pub const solClient_rxMsgCallback_returnCode_SOLCLIENT_CALLBACK_TAKE_MSG:
    solClient_rxMsgCallback_returnCode = 1;
pub type solClient_rxMsgCallback_returnCode = ::std::os::raw::c_uint;
pub use self::solClient_rxMsgCallback_returnCode as solClient_rxMsgCallback_returnCode_t;
pub const solClient_subCode_SOLCLIENT_SUBCODE_OK: solClient_subCode = 0;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PARAM_OUT_OF_RANGE: solClient_subCode = 1;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PARAM_NULL_PTR: solClient_subCode = 2;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PARAM_CONFLICT: solClient_subCode = 3;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INSUFFICIENT_SPACE: solClient_subCode = 4;
pub const solClient_subCode_SOLCLIENT_SUBCODE_OUT_OF_RESOURCES: solClient_subCode = 5;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INTERNAL_ERROR: solClient_subCode = 6;
pub const solClient_subCode_SOLCLIENT_SUBCODE_OUT_OF_MEMORY: solClient_subCode = 7;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PROTOCOL_ERROR: solClient_subCode = 8;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INIT_NOT_CALLED: solClient_subCode = 9;
pub const solClient_subCode_SOLCLIENT_SUBCODE_TIMEOUT: solClient_subCode = 10;
pub const solClient_subCode_SOLCLIENT_SUBCODE_KEEP_ALIVE_FAILURE: solClient_subCode = 11;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SESSION_NOT_ESTABLISHED: solClient_subCode = 12;
pub const solClient_subCode_SOLCLIENT_SUBCODE_OS_ERROR: solClient_subCode = 13;
pub const solClient_subCode_SOLCLIENT_SUBCODE_COMMUNICATION_ERROR: solClient_subCode = 14;
pub const solClient_subCode_SOLCLIENT_SUBCODE_USER_DATA_TOO_LARGE: solClient_subCode = 15;
pub const solClient_subCode_SOLCLIENT_SUBCODE_TOPIC_TOO_LARGE: solClient_subCode = 16;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_TOPIC_SYNTAX: solClient_subCode = 17;
pub const solClient_subCode_SOLCLIENT_SUBCODE_XML_PARSE_ERROR: solClient_subCode = 18;
pub const solClient_subCode_SOLCLIENT_SUBCODE_LOGIN_FAILURE: solClient_subCode = 19;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_VIRTUAL_ADDRESS: solClient_subCode = 20;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_DELETE_IN_PROGRESS: solClient_subCode = 21;
pub const solClient_subCode_SOLCLIENT_SUBCODE_TOO_MANY_CLIENTS: solClient_subCode = 22;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SUBSCRIPTION_ALREADY_PRESENT: solClient_subCode = 23;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SUBSCRIPTION_NOT_FOUND: solClient_subCode = 24;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SUBSCRIPTION_INVALID: solClient_subCode = 25;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SUBSCRIPTION_OTHER: solClient_subCode = 26;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CONTROL_OTHER: solClient_subCode = 27;
pub const solClient_subCode_SOLCLIENT_SUBCODE_DATA_OTHER: solClient_subCode = 28;
pub const solClient_subCode_SOLCLIENT_SUBCODE_LOG_FILE_ERROR: solClient_subCode = 29;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MESSAGE_TOO_LARGE: solClient_subCode = 30;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SUBSCRIPTION_TOO_MANY: solClient_subCode = 31;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_SESSION_OPERATION: solClient_subCode = 32;
pub const solClient_subCode_SOLCLIENT_SUBCODE_TOPIC_MISSING: solClient_subCode = 33;
pub const solClient_subCode_SOLCLIENT_SUBCODE_ASSURED_MESSAGING_NOT_ESTABLISHED: solClient_subCode =
    34;
pub const solClient_subCode_SOLCLIENT_SUBCODE_ASSURED_MESSAGING_STATE_ERROR: solClient_subCode = 35;
pub const solClient_subCode_SOLCLIENT_SUBCODE_QUEUENAME_TOPIC_CONFLICT: solClient_subCode = 36;
pub const solClient_subCode_SOLCLIENT_SUBCODE_QUEUENAME_TOO_LARGE: solClient_subCode = 37;
pub const solClient_subCode_SOLCLIENT_SUBCODE_QUEUENAME_INVALID_MODE: solClient_subCode = 38;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MAX_TOTAL_MSGSIZE_EXCEEDED: solClient_subCode = 39;
pub const solClient_subCode_SOLCLIENT_SUBCODE_DBLOCK_ALREADY_EXISTS: solClient_subCode = 40;
pub const solClient_subCode_SOLCLIENT_SUBCODE_NO_STRUCTURED_DATA: solClient_subCode = 41;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CONTAINER_BUSY: solClient_subCode = 42;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_DATA_CONVERSION: solClient_subCode = 43;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CANNOT_MODIFY_WHILE_NOT_IDLE: solClient_subCode = 44;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MSG_VPN_NOT_ALLOWED: solClient_subCode = 45;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_NAME_INVALID: solClient_subCode = 46;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MSG_VPN_UNAVAILABLE: solClient_subCode = 47;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_USERNAME_IS_SHUTDOWN: solClient_subCode = 48;
pub const solClient_subCode_SOLCLIENT_SUBCODE_DYNAMIC_CLIENTS_NOT_ALLOWED: solClient_subCode = 49;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_NAME_ALREADY_IN_USE: solClient_subCode = 50;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CACHE_NO_DATA: solClient_subCode = 51;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CACHE_SUSPECT_DATA: solClient_subCode = 52;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CACHE_ERROR_RESPONSE: solClient_subCode = 53;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CACHE_INVALID_SESSION: solClient_subCode = 54;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CACHE_TIMEOUT: solClient_subCode = 55;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CACHE_LIVEDATA_FULFILL: solClient_subCode = 56;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CACHE_ALREADY_IN_PROGRESS: solClient_subCode = 57;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MISSING_REPLY_TO: solClient_subCode = 58;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CANNOT_BIND_TO_QUEUE: solClient_subCode = 59;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_TOPIC_NAME_FOR_TE: solClient_subCode = 60;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_TOPIC_NAME_FOR_DTE: solClient_subCode = 60;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNKNOWN_QUEUE_NAME: solClient_subCode = 61;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNKNOWN_TE_NAME: solClient_subCode = 62;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNKNOWN_DTE_NAME: solClient_subCode = 62;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MAX_CLIENTS_FOR_QUEUE: solClient_subCode = 63;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MAX_CLIENTS_FOR_TE: solClient_subCode = 64;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MAX_CLIENTS_FOR_DTE: solClient_subCode = 64;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNEXPECTED_UNBIND: solClient_subCode = 65;
pub const solClient_subCode_SOLCLIENT_SUBCODE_QUEUE_NOT_FOUND: solClient_subCode = 66;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_ACL_DENIED: solClient_subCode = 67;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SUBSCRIPTION_ACL_DENIED: solClient_subCode = 68;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PUBLISH_ACL_DENIED: solClient_subCode = 69;
pub const solClient_subCode_SOLCLIENT_SUBCODE_DELIVER_TO_ONE_INVALID: solClient_subCode = 70;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SPOOL_OVER_QUOTA: solClient_subCode = 71;
pub const solClient_subCode_SOLCLIENT_SUBCODE_QUEUE_SHUTDOWN: solClient_subCode = 72;
pub const solClient_subCode_SOLCLIENT_SUBCODE_TE_SHUTDOWN: solClient_subCode = 73;
pub const solClient_subCode_SOLCLIENT_SUBCODE_NO_MORE_NON_DURABLE_QUEUE_OR_TE: solClient_subCode =
    74;
pub const solClient_subCode_SOLCLIENT_SUBCODE_ENDPOINT_ALREADY_EXISTS: solClient_subCode = 75;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PERMISSION_NOT_ALLOWED: solClient_subCode = 76;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_SELECTOR: solClient_subCode = 77;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MAX_MESSAGE_USAGE_EXCEEDED: solClient_subCode = 78;
pub const solClient_subCode_SOLCLIENT_SUBCODE_ENDPOINT_PROPERTY_MISMATCH: solClient_subCode = 79;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SUBSCRIPTION_MANAGER_DENIED: solClient_subCode = 80;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNKNOWN_CLIENT_NAME: solClient_subCode = 81;
pub const solClient_subCode_SOLCLIENT_SUBCODE_QUOTA_OUT_OF_RANGE: solClient_subCode = 82;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SUBSCRIPTION_ATTRIBUTES_CONFLICT: solClient_subCode =
    83;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_SMF_MESSAGE: solClient_subCode = 84;
pub const solClient_subCode_SOLCLIENT_SUBCODE_NO_LOCAL_NOT_SUPPORTED: solClient_subCode = 85;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:
    solClient_subCode = 86;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CANNOT_BLOCK_IN_CONTEXT: solClient_subCode = 87;
pub const solClient_subCode_SOLCLIENT_SUBCODE_FLOW_ACTIVE_FLOW_INDICATION_UNSUPPORTED:
    solClient_subCode = 88;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNRESOLVED_HOST: solClient_subCode = 89;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CUT_THROUGH_UNSUPPORTED: solClient_subCode = 90;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CUT_THROUGH_ALREADY_BOUND: solClient_subCode = 91;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CUT_THROUGH_INCOMPATIBLE_WITH_SESSION:
    solClient_subCode = 92;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_FLOW_OPERATION: solClient_subCode = 93;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNKNOWN_FLOW_NAME: solClient_subCode = 94;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLICATION_IS_STANDBY: solClient_subCode = 95;
pub const solClient_subCode_SOLCLIENT_SUBCODE_LOW_PRIORITY_MSG_CONGESTION: solClient_subCode = 96;
pub const solClient_subCode_SOLCLIENT_SUBCODE_LIBRARY_NOT_LOADED: solClient_subCode = 97;
pub const solClient_subCode_SOLCLIENT_SUBCODE_FAILED_LOADING_TRUSTSTORE: solClient_subCode = 98;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNTRUSTED_CERTIFICATE: solClient_subCode = 99;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNTRUSTED_COMMONNAME: solClient_subCode = 100;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CERTIFICATE_DATE_INVALID: solClient_subCode = 101;
pub const solClient_subCode_SOLCLIENT_SUBCODE_FAILED_LOADING_CERTIFICATE_AND_KEY:
    solClient_subCode = 102;
pub const solClient_subCode_SOLCLIENT_SUBCODE_BASIC_AUTHENTICATION_IS_SHUTDOWN: solClient_subCode =
    103;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN:
    solClient_subCode = 104;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNTRUSTED_CLIENT_CERTIFICATE: solClient_subCode = 105;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_CERTIFICATE_DATE_INVALID: solClient_subCode =
    106;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CACHE_REQUEST_CANCELLED: solClient_subCode = 107;
pub const solClient_subCode_SOLCLIENT_SUBCODE_DELIVERY_MODE_UNSUPPORTED: solClient_subCode = 108;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PUBLISHER_NOT_CREATED: solClient_subCode = 109;
pub const solClient_subCode_SOLCLIENT_SUBCODE_FLOW_UNBOUND: solClient_subCode = 110;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_TRANSACTED_SESSION_ID: solClient_subCode =
    111;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_TRANSACTION_ID: solClient_subCode = 112;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MAX_TRANSACTED_SESSIONS_EXCEEDED: solClient_subCode =
    113;
pub const solClient_subCode_SOLCLIENT_SUBCODE_TRANSACTED_SESSION_NAME_IN_USE: solClient_subCode =
    114;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SERVICE_UNAVAILABLE: solClient_subCode = 115;
pub const solClient_subCode_SOLCLIENT_SUBCODE_NO_TRANSACTION_STARTED: solClient_subCode = 116;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PUBLISHER_NOT_ESTABLISHED: solClient_subCode = 117;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MESSAGE_PUBLISH_FAILURE: solClient_subCode = 118;
pub const solClient_subCode_SOLCLIENT_SUBCODE_TRANSACTION_FAILURE: solClient_subCode = 119;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MESSAGE_CONSUME_FAILURE: solClient_subCode = 120;
pub const solClient_subCode_SOLCLIENT_SUBCODE_ENDPOINT_MODIFIED: solClient_subCode = 121;
pub const solClient_subCode_SOLCLIENT_SUBCODE_INVALID_CONNECTION_OWNER: solClient_subCode = 122;
pub const solClient_subCode_SOLCLIENT_SUBCODE_KERBEROS_AUTHENTICATION_IS_SHUTDOWN:
    solClient_subCode = 123;
pub const solClient_subCode_SOLCLIENT_SUBCODE_COMMIT_OR_ROLLBACK_IN_PROGRESS: solClient_subCode =
    124;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNBIND_RESPONSE_LOST: solClient_subCode = 125;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MAX_TRANSACTIONS_EXCEEDED: solClient_subCode = 126;
pub const solClient_subCode_SOLCLIENT_SUBCODE_COMMIT_STATUS_UNKNOWN: solClient_subCode = 127;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PROXY_AUTH_REQUIRED: solClient_subCode = 128;
pub const solClient_subCode_SOLCLIENT_SUBCODE_PROXY_AUTH_FAILURE: solClient_subCode = 129;
pub const solClient_subCode_SOLCLIENT_SUBCODE_NO_SUBSCRIPTION_MATCH: solClient_subCode = 130;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SUBSCRIPTION_MATCH_ERROR: solClient_subCode = 131;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SELECTOR_MATCH_ERROR: solClient_subCode = 132;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_NOT_SUPPORTED: solClient_subCode = 133;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_DISABLED: solClient_subCode = 134;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED:
    solClient_subCode = 135;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED:
    solClient_subCode = 136;
pub const solClient_subCode_SOLCLIENT_SUBCODE_CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:
    solClient_subCode = 137;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_TEMPORARY_NOT_SUPPORTED: solClient_subCode =
    138;
pub const solClient_subCode_SOLCLIENT_SUBCODE_UNKNOWN_START_LOCATION_TYPE: solClient_subCode = 139;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_MESSAGE_UNAVAILABLE: solClient_subCode = 140;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_STARTED: solClient_subCode = 141;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_CANCELLED: solClient_subCode = 142;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_START_TIME_NOT_AVAILABLE: solClient_subCode =
    143;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_MESSAGE_REJECTED: solClient_subCode = 144;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_LOG_MODIFIED: solClient_subCode = 145;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MISMATCHED_ENDPOINT_ERROR_ID: solClient_subCode = 146;
pub const solClient_subCode_SOLCLIENT_SUBCODE_OUT_OF_REPLAY_RESOURCES: solClient_subCode = 147;
pub const solClient_subCode_SOLCLIENT_SUBCODE_TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT : solClient_subCode = 148 ;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_FAILED: solClient_subCode = 149;
pub const solClient_subCode_SOLCLIENT_SUBCODE_COMPRESSED_SSL_NOT_SUPPORTED: solClient_subCode = 150;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:
    solClient_subCode = 151;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SHARED_SUBSCRIPTIONS_NOT_ALLOWED: solClient_subCode =
    152;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:
    solClient_subCode = 153;
pub const solClient_subCode_SOLCLIENT_SUBCODE_OBJECT_DESTROYED: solClient_subCode = 154;
pub const solClient_subCode_SOLCLIENT_SUBCODE_DELIVERY_COUNT_NOT_SUPPORTED: solClient_subCode = 155;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_START_MESSAGE_UNAVAILABLE: solClient_subCode =
    156;
pub const solClient_subCode_SOLCLIENT_SUBCODE_MESSAGE_ID_NOT_COMPARABLE: solClient_subCode = 157;
pub const solClient_subCode_SOLCLIENT_SUBCODE_REPLAY_ANONYMOUS_NOT_SUPPORTED: solClient_subCode =
    158;
pub const solClient_subCode_SOLCLIENT_SUBCODE_BROWSING_NOT_SUPPORTED_ON_PARTITIONED_QUEUE:
    solClient_subCode = 159;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SELECTORS_NOT_SUPPORTED_ON_PARTITIONED_QUEUE:
    solClient_subCode = 160;
pub const solClient_subCode_SOLCLIENT_SUBCODE_SYNC_REPLICATION_INELIGIBLE: solClient_subCode = 161;
pub const solClient_subCode_SOLCLIENT_SUBCODE_ENDPOINT_SHUTDOWN: solClient_subCode = 162;
pub const solClient_subCode_SOLCLIENT_SUBCODE_AD_APP_ACK_FAILED_NOT_SUPPORTED: solClient_subCode =
    163;
pub type solClient_subCode = ::std::os::raw::c_uint;
pub use self::solClient_subCode as solClient_subCode_t;
pub const solClient_log_level_SOLCLIENT_LOG_EMERGENCY: solClient_log_level = 0;
pub const solClient_log_level_SOLCLIENT_LOG_ALERT: solClient_log_level = 1;
pub const solClient_log_level_SOLCLIENT_LOG_CRITICAL: solClient_log_level = 2;
pub const solClient_log_level_SOLCLIENT_LOG_ERROR: solClient_log_level = 3;
pub const solClient_log_level_SOLCLIENT_LOG_WARNING: solClient_log_level = 4;
pub const solClient_log_level_SOLCLIENT_LOG_NOTICE: solClient_log_level = 5;
pub const solClient_log_level_SOLCLIENT_LOG_INFO: solClient_log_level = 6;
pub const solClient_log_level_SOLCLIENT_LOG_DEBUG: solClient_log_level = 7;
pub type solClient_log_level = ::std::os::raw::c_uint;
pub use self::solClient_log_level as solClient_log_level_t;
pub const solClient_log_category_SOLCLIENT_LOG_CATEGORY_ALL: solClient_log_category = 0;
pub const solClient_log_category_SOLCLIENT_LOG_CATEGORY_SDK: solClient_log_category = 1;
pub const solClient_log_category_SOLCLIENT_LOG_CATEGORY_APP: solClient_log_category = 2;
pub type solClient_log_category = ::std::os::raw::c_uint;
pub use self::solClient_log_category as solClient_log_category_t;
pub type solClient_fd_t = ::std::os::raw::c_int;
pub type solClient_fdEvent_t = solClient_uint32_t;
pub type solClient_subscribeFlags_t = solClient_uint32_t;
pub type solClient_session_responseCode_t = solClient_uint32_t;
pub type solClient_msgId_t = solClient_uint64_t;
pub type solClient_modifyPropFlags_t = solClient_uint32_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct solClient_uuid {
    pub timeLow: solClient_uint32_t,
    pub timeMid: solClient_uint16_t,
    pub timeHiAndVersion: solClient_uint16_t,
    pub clockSeqHiAndReserved: solClient_uint8_t,
    pub clockSeqLow: solClient_uint8_t,
    pub node: [solClient_uint8_t; 6usize],
}
#[test]
fn bindgen_test_layout_solClient_uuid() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_uuid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_uuid>(),
        16usize,
        concat!("Size of: ", stringify!(solClient_uuid))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_uuid>(),
        4usize,
        concat!("Alignment of ", stringify!(solClient_uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeLow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_uuid),
            "::",
            stringify!(timeLow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeMid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_uuid),
            "::",
            stringify!(timeMid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeHiAndVersion) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_uuid),
            "::",
            stringify!(timeHiAndVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clockSeqHiAndReserved) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_uuid),
            "::",
            stringify!(clockSeqHiAndReserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clockSeqLow) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_uuid),
            "::",
            stringify!(clockSeqLow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_uuid),
            "::",
            stringify!(node)
        )
    );
}
pub type solClient_uuid_t = solClient_uuid;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_UP_NOTICE: solClient_session_event = 0;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_DOWN_ERROR: solClient_session_event = 1;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR:
    solClient_session_event = 2;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR:
    solClient_session_event = 3;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR:
    solClient_session_event = 4;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR:
    solClient_session_event = 5;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT: solClient_session_event =
    6;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP:
    solClient_session_event = 7;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED:
    solClient_session_event = 8;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN:
    solClient_session_event = 8;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR:
    solClient_session_event = 9;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR:
    solClient_session_event = 9;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK:
    solClient_session_event = 10;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK:
    solClient_session_event = 10;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_CAN_SEND: solClient_session_event = 11;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE:
    solClient_session_event = 12;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE:
    solClient_session_event = 13;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_PROVISION_ERROR: solClient_session_event =
    14;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_PROVISION_OK: solClient_session_event =
    15;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK: solClient_session_event =
    16;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED:
    solClient_session_event = 17;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK: solClient_session_event =
    18;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL: solClient_session_event =
    19;
pub const solClient_session_event_SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES:
    solClient_session_event = 20;
pub type solClient_session_event = ::std::os::raw::c_uint;
pub use self::solClient_session_event as solClient_session_event_t;
pub const solClient_flow_event_SOLCLIENT_FLOW_EVENT_UP_NOTICE: solClient_flow_event = 0;
pub const solClient_flow_event_SOLCLIENT_FLOW_EVENT_DOWN_ERROR: solClient_flow_event = 1;
pub const solClient_flow_event_SOLCLIENT_FLOW_EVENT_BIND_FAILED_ERROR: solClient_flow_event = 2;
pub const solClient_flow_event_SOLCLIENT_FLOW_EVENT_REJECTED_MSG_ERROR: solClient_flow_event = 3;
pub const solClient_flow_event_SOLCLIENT_FLOW_EVENT_SESSION_DOWN: solClient_flow_event = 4;
pub const solClient_flow_event_SOLCLIENT_FLOW_EVENT_ACTIVE: solClient_flow_event = 5;
pub const solClient_flow_event_SOLCLIENT_FLOW_EVENT_INACTIVE: solClient_flow_event = 6;
pub const solClient_flow_event_SOLCLIENT_FLOW_EVENT_RECONNECTING: solClient_flow_event = 7;
pub const solClient_flow_event_SOLCLIENT_FLOW_EVENT_RECONNECTED: solClient_flow_event = 8;
pub type solClient_flow_event = ::std::os::raw::c_uint;
pub use self::solClient_flow_event as solClient_flow_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_errorInfo {
    pub subCode: solClient_subCode_t,
    pub responseCode: solClient_session_responseCode_t,
    pub errorStr: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_solClient_errorInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_errorInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_errorInfo>(),
        264usize,
        concat!("Size of: ", stringify!(solClient_errorInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_errorInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(solClient_errorInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subCode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_errorInfo),
            "::",
            stringify!(subCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).responseCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_errorInfo),
            "::",
            stringify!(responseCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errorStr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_errorInfo),
            "::",
            stringify!(errorStr)
        )
    );
}
impl Default for solClient_errorInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_errorInfo_pt = *mut solClient_errorInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_bufInfo {
    pub buf_p: *mut ::std::os::raw::c_void,
    pub bufSize: solClient_uint32_t,
}
#[test]
fn bindgen_test_layout_solClient_bufInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_bufInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_bufInfo>(),
        16usize,
        concat!("Size of: ", stringify!(solClient_bufInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_bufInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(solClient_bufInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_bufInfo),
            "::",
            stringify!(buf_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_bufInfo),
            "::",
            stringify!(bufSize)
        )
    );
}
impl Default for solClient_bufInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_bufInfo_t = solClient_bufInfo;
pub type solClient_bufInfo_pt = *mut solClient_bufInfo_t;
pub type solClient_stats_pt = *mut solClient_uint64_t;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DIRECT_BYTES: solClient_stats_rx = 0;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_BYTES: solClient_stats_rx = 0;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DIRECT_MSGS: solClient_stats_rx = 1;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_MSGS: solClient_stats_rx = 1;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_READS: solClient_stats_rx = 2;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_IND: solClient_stats_rx = 3;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_SMF_UNKNOWN_ELEMENT: solClient_stats_rx = 4;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_MSG_HDR_ERROR: solClient_stats_rx = 4;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_MSG_TOO_BIG: solClient_stats_rx = 5;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_ACKED: solClient_stats_rx = 6;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_DUPLICATE: solClient_stats_rx = 7;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_NO_MATCHING_FLOW: solClient_stats_rx = 8;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_OUTOFORDER: solClient_stats_rx = 9;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_PERSISTENT_BYTES: solClient_stats_rx = 10;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_PERSISTENT_MSGS: solClient_stats_rx = 11;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_NONPERSISTENT_BYTES: solClient_stats_rx = 12;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_NONPERSISTENT_MSGS: solClient_stats_rx = 13;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_CTL_MSGS: solClient_stats_rx = 14;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_CTL_BYTES: solClient_stats_rx = 15;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_TOTAL_DATA_BYTES: solClient_stats_rx = 16;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_TOTAL_DATA_MSGS: solClient_stats_rx = 17;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_COMPRESSED_BYTES: solClient_stats_rx = 18;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_REPLY_MSG: solClient_stats_rx = 19;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_REPLY_MSG_DISCARD: solClient_stats_rx = 20;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_CACHEREQUEST_OK_RESPONSE: solClient_stats_rx = 21;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_CACHEREQUEST_FULFILL_DATA: solClient_stats_rx = 22;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_CACHEREQUEST_ERROR_RESPONSE: solClient_stats_rx =
    23;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_CACHEREQUEST_DISCARD_RESPONSE: solClient_stats_rx =
    24;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_CACHEMSG: solClient_stats_rx = 25;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_FOUND_CTSYNC: solClient_stats_rx = 26;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_LOST_CTSYNC: solClient_stats_rx = 27;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_LOST_CTSYNC_GM: solClient_stats_rx = 28;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_OVERFLOW_CTSYNC_BUFFER: solClient_stats_rx = 29;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_ALREADY_CUT_THROUGH: solClient_stats_rx = 30;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_FROM_CTSYNC: solClient_stats_rx = 31;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_MSG_FLOW_UNBOUND_PENDING:
    solClient_stats_rx = 32;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_MSG_TRANSACTION_ROLLBACK:
    solClient_stats_rx = 33;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_DISCARD_TRANSACTION_RESPONSE: solClient_stats_rx =
    34;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_SSL_READ_EVENTS: solClient_stats_rx = 35;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_SSL_READ_CALLS: solClient_stats_rx = 36;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_SETTLE_ACCEPTED: solClient_stats_rx = 37;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_SETTLE_FAILED: solClient_stats_rx = 38;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_SETTLE_REJECTED: solClient_stats_rx = 39;
pub const solClient_stats_rx_SOLCLIENT_STATS_RX_NUM_STATS: solClient_stats_rx = 40;
pub type solClient_stats_rx = ::std::os::raw::c_uint;
pub use self::solClient_stats_rx as solClient_stats_rx_t;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_TOTAL_DATA_BYTES: solClient_stats_tx = 0;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_BYTES: solClient_stats_tx = 0;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_TOTAL_DATA_MSGS: solClient_stats_tx = 1;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_MSGS: solClient_stats_tx = 1;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_WOULD_BLOCK: solClient_stats_tx = 2;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_SOCKET_FULL: solClient_stats_tx = 3;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_DIRECT_BYTES: solClient_stats_tx = 4;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_DIRECT_MSGS: solClient_stats_tx = 5;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_PERSISTENT_BYTES: solClient_stats_tx = 6;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_NONPERSISTENT_BYTES: solClient_stats_tx = 7;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_PERSISTENT_MSGS: solClient_stats_tx = 8;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_NONPERSISTENT_MSGS: solClient_stats_tx = 9;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_PERSISTENT_REDELIVERED: solClient_stats_tx = 10;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_NONPERSISTENT_REDELIVERED: solClient_stats_tx = 11;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_PERSISTENT_BYTES_REDELIVERED: solClient_stats_tx =
    12;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_NONPERSISTENT_BYTES_REDELIVERED:
    solClient_stats_tx = 13;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_ACKS_RXED: solClient_stats_tx = 14;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_WINDOW_CLOSE: solClient_stats_tx = 15;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_ACK_TIMEOUT: solClient_stats_tx = 16;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_CTL_MSGS: solClient_stats_tx = 17;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_CTL_BYTES: solClient_stats_tx = 18;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_COMPRESSED_BYTES: solClient_stats_tx = 19;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_TOTAL_CONNECTION_ATTEMPTS: solClient_stats_tx = 20;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_REQUEST_SENT: solClient_stats_tx = 21;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_REQUEST_TIMEOUT: solClient_stats_tx = 22;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_CACHEREQUEST_SENT: solClient_stats_tx = 23;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_GUARANTEED_MSGS_SENT_CONFIRMED: solClient_stats_tx =
    24;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_DISCARD_NO_MATCH: solClient_stats_tx = 25;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_DISCARD_CHANNEL_ERROR: solClient_stats_tx = 26;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_BLOCKED_ON_SEND: solClient_stats_tx = 27;
pub const solClient_stats_tx_SOLCLIENT_STATS_TX_NUM_STATS: solClient_stats_tx = 28;
pub type solClient_stats_tx = ::std::os::raw::c_uint;
pub use self::solClient_stats_tx as solClient_stats_tx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_session_eventCallbackInfo {
    pub sessionEvent: solClient_session_event_t,
    pub responseCode: solClient_session_responseCode_t,
    pub info_p: *const ::std::os::raw::c_char,
    pub correlation_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_session_eventCallbackInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_session_eventCallbackInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_session_eventCallbackInfo>(),
        24usize,
        concat!("Size of: ", stringify!(solClient_session_eventCallbackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_session_eventCallbackInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_session_eventCallbackInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_eventCallbackInfo),
            "::",
            stringify!(sessionEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).responseCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_eventCallbackInfo),
            "::",
            stringify!(responseCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_eventCallbackInfo),
            "::",
            stringify!(info_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).correlation_p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_eventCallbackInfo),
            "::",
            stringify!(correlation_p)
        )
    );
}
impl Default for solClient_session_eventCallbackInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_session_eventCallbackInfo_pt = *mut solClient_session_eventCallbackInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_flow_eventCallbackInfo {
    pub flowEvent: solClient_flow_event_t,
    pub responseCode: solClient_session_responseCode_t,
    pub info_p: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_solClient_flow_eventCallbackInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_flow_eventCallbackInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_flow_eventCallbackInfo>(),
        16usize,
        concat!("Size of: ", stringify!(solClient_flow_eventCallbackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_flow_eventCallbackInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_flow_eventCallbackInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flowEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_eventCallbackInfo),
            "::",
            stringify!(flowEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).responseCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_eventCallbackInfo),
            "::",
            stringify!(responseCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_eventCallbackInfo),
            "::",
            stringify!(info_p)
        )
    );
}
impl Default for solClient_flow_eventCallbackInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_flow_eventCallbackInfo_pt = *mut solClient_flow_eventCallbackInfo;
pub type solClient_session_eventCallbackFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueSession_p: solClient_opaqueSession_pt,
        eventInfo_p: solClient_session_eventCallbackInfo_pt,
        user_p: *mut ::std::os::raw::c_void,
    ),
>;
pub type solClient_flow_eventCallbackFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        eventInfo_p: solClient_flow_eventCallbackInfo_pt,
        user_p: *mut ::std::os::raw::c_void,
    ),
>;
pub type solClient_context_fdCallbackFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueContext_p: solClient_opaqueContext_pt,
        fd: solClient_fd_t,
        events: solClient_fdEvent_t,
        user_p: *mut ::std::os::raw::c_void,
    ),
>;
pub type solClient_session_rxMsgCallbackFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueSession_p: solClient_opaqueSession_pt,
        msg_p: solClient_opaqueMsg_pt,
        user_p: *mut ::std::os::raw::c_void,
    ) -> solClient_rxMsgCallback_returnCode_t,
>;
pub type solClient_flow_rxMsgCallbackFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        msg_p: solClient_opaqueMsg_pt,
        user_p: *mut ::std::os::raw::c_void,
    ) -> solClient_rxMsgCallback_returnCode_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_log_callbackInfo {
    pub category: solClient_log_category_t,
    pub level: solClient_log_level_t,
    pub msg_p: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_solClient_log_callbackInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_log_callbackInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_log_callbackInfo>(),
        16usize,
        concat!("Size of: ", stringify!(solClient_log_callbackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_log_callbackInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(solClient_log_callbackInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).category) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_log_callbackInfo),
            "::",
            stringify!(category)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_log_callbackInfo),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_log_callbackInfo),
            "::",
            stringify!(msg_p)
        )
    );
}
impl Default for solClient_log_callbackInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_log_callbackInfo_pt = *mut solClient_log_callbackInfo;
pub type solClient_log_callbackFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        logInfo_p: solClient_log_callbackInfo_pt,
        user_p: *mut ::std::os::raw::c_void,
    ),
>;
pub type solClient_context_timerCallbackFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueContext_p: solClient_opaqueContext_pt,
        user_p: *mut ::std::os::raw::c_void,
    ),
>;
pub type solClient_context_timerId_t = solClient_uint32_t;
pub const solClient_context_timerMode_SOLCLIENT_CONTEXT_TIMER_ONE_SHOT:
    solClient_context_timerMode = 0;
pub const solClient_context_timerMode_SOLCLIENT_CONTEXT_TIMER_REPEAT: solClient_context_timerMode =
    1;
pub type solClient_context_timerMode = ::std::os::raw::c_uint;
pub use self::solClient_context_timerMode as solClient_context_timerMode_t;
pub const solClient_dispatchType_SOLCLIENT_DISPATCH_TYPE_CALLBACK: solClient_dispatchType = 1;
pub type solClient_dispatchType = ::std::os::raw::c_uint;
pub use self::solClient_dispatchType as solClient_dispatchType_t;
pub const solClient_msgOutcome_SOLCLIENT_OUTCOME_ACCEPTED: solClient_msgOutcome = 0;
pub const solClient_msgOutcome_SOLCLIENT_OUTCOME_FAILED: solClient_msgOutcome = 2;
pub const solClient_msgOutcome_SOLCLIENT_OUTCOME_REJECTED: solClient_msgOutcome = 3;
pub type solClient_msgOutcome = ::std::os::raw::c_uint;
pub use self::solClient_msgOutcome as solClient_msgOutcome_t;
pub type solClient_context_registerFdFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        app_p: *mut ::std::os::raw::c_void,
        fd: solClient_fd_t,
        events: solClient_fdEvent_t,
        callback_p: solClient_context_fdCallbackFunc_t,
        user_p: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t,
>;
pub type solClient_context_unregisterFdFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        app_p: *mut ::std::os::raw::c_void,
        fd: solClient_fd_t,
        events: solClient_fdEvent_t,
    ) -> solClient_returnCode_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_context_createRegisterFdFuncInfo {
    pub regFdFunc_p: solClient_context_registerFdFunc_t,
    pub unregFdFunc_p: solClient_context_unregisterFdFunc_t,
    pub user_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_context_createRegisterFdFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_context_createRegisterFdFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_context_createRegisterFdFuncInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(solClient_context_createRegisterFdFuncInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_context_createRegisterFdFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_context_createRegisterFdFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regFdFunc_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_context_createRegisterFdFuncInfo),
            "::",
            stringify!(regFdFunc_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unregFdFunc_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_context_createRegisterFdFuncInfo),
            "::",
            stringify!(unregFdFunc_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_context_createRegisterFdFuncInfo),
            "::",
            stringify!(user_p)
        )
    );
}
impl Default for solClient_context_createRegisterFdFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_context_createRegisterFdFuncInfo_t = solClient_context_createRegisterFdFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_context_createFuncInfo {
    pub regFdInfo: solClient_context_createRegisterFdFuncInfo_t,
}
#[test]
fn bindgen_test_layout_solClient_context_createFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_context_createFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_context_createFuncInfo>(),
        24usize,
        concat!("Size of: ", stringify!(solClient_context_createFuncInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_context_createFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_context_createFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regFdInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_context_createFuncInfo),
            "::",
            stringify!(regFdInfo)
        )
    );
}
impl Default for solClient_context_createFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_context_createFuncInfo_t = solClient_context_createFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_session_createRxCallbackFuncInfo {
    pub callback_p: *mut ::std::os::raw::c_void,
    pub user_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_session_createRxCallbackFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_session_createRxCallbackFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_session_createRxCallbackFuncInfo>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(solClient_session_createRxCallbackFuncInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_session_createRxCallbackFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_session_createRxCallbackFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_createRxCallbackFuncInfo),
            "::",
            stringify!(callback_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_createRxCallbackFuncInfo),
            "::",
            stringify!(user_p)
        )
    );
}
impl Default for solClient_session_createRxCallbackFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_session_createRxCallbackFuncInfo_t = solClient_session_createRxCallbackFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_session_createRxMsgCallbackFuncInfo {
    pub callback_p: solClient_session_rxMsgCallbackFunc_t,
    pub user_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_session_createRxMsgCallbackFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_session_createRxMsgCallbackFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_session_createRxMsgCallbackFuncInfo>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(solClient_session_createRxMsgCallbackFuncInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_session_createRxMsgCallbackFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_session_createRxMsgCallbackFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_createRxMsgCallbackFuncInfo),
            "::",
            stringify!(callback_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_createRxMsgCallbackFuncInfo),
            "::",
            stringify!(user_p)
        )
    );
}
impl Default for solClient_session_createRxMsgCallbackFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_session_createRxMsgCallbackFuncInfo_t =
    solClient_session_createRxMsgCallbackFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_session_createEventCallbackFuncInfo {
    pub callback_p: solClient_session_eventCallbackFunc_t,
    pub user_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_session_createEventCallbackFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_session_createEventCallbackFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_session_createEventCallbackFuncInfo>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(solClient_session_createEventCallbackFuncInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_session_createEventCallbackFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_session_createEventCallbackFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_createEventCallbackFuncInfo),
            "::",
            stringify!(callback_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_createEventCallbackFuncInfo),
            "::",
            stringify!(user_p)
        )
    );
}
impl Default for solClient_session_createEventCallbackFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_session_createEventCallbackFuncInfo_t =
    solClient_session_createEventCallbackFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_session_rxMsgDispatchFuncInfo {
    pub dispatchType: solClient_dispatchType_t,
    pub callback_p: solClient_session_rxMsgCallbackFunc_t,
    pub user_p: *mut ::std::os::raw::c_void,
    pub rfu_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_session_rxMsgDispatchFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_session_rxMsgDispatchFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_session_rxMsgDispatchFuncInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(solClient_session_rxMsgDispatchFuncInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_session_rxMsgDispatchFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_session_rxMsgDispatchFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dispatchType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_rxMsgDispatchFuncInfo),
            "::",
            stringify!(dispatchType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_rxMsgDispatchFuncInfo),
            "::",
            stringify!(callback_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_rxMsgDispatchFuncInfo),
            "::",
            stringify!(user_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rfu_p) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_rxMsgDispatchFuncInfo),
            "::",
            stringify!(rfu_p)
        )
    );
}
impl Default for solClient_session_rxMsgDispatchFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_session_rxMsgDispatchFuncInfo_t = solClient_session_rxMsgDispatchFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_flow_createRxCallbackFuncInfo {
    pub callback_p: *mut ::std::os::raw::c_void,
    pub user_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_flow_createRxCallbackFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_flow_createRxCallbackFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_flow_createRxCallbackFuncInfo>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(solClient_flow_createRxCallbackFuncInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_flow_createRxCallbackFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_flow_createRxCallbackFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_createRxCallbackFuncInfo),
            "::",
            stringify!(callback_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_createRxCallbackFuncInfo),
            "::",
            stringify!(user_p)
        )
    );
}
impl Default for solClient_flow_createRxCallbackFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_flow_createRxCallbackFuncInfo_t = solClient_flow_createRxCallbackFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_flow_createRxMsgCallbackFuncInfo {
    pub callback_p: solClient_flow_rxMsgCallbackFunc_t,
    pub user_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_flow_createRxMsgCallbackFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_flow_createRxMsgCallbackFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_flow_createRxMsgCallbackFuncInfo>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(solClient_flow_createRxMsgCallbackFuncInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_flow_createRxMsgCallbackFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_flow_createRxMsgCallbackFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_createRxMsgCallbackFuncInfo),
            "::",
            stringify!(callback_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_createRxMsgCallbackFuncInfo),
            "::",
            stringify!(user_p)
        )
    );
}
impl Default for solClient_flow_createRxMsgCallbackFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_flow_createRxMsgCallbackFuncInfo_t = solClient_flow_createRxMsgCallbackFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_flow_rxMsgDispatchFuncInfo {
    pub dispatchType: solClient_dispatchType_t,
    pub callback_p: solClient_flow_rxMsgCallbackFunc_t,
    pub user_p: *mut ::std::os::raw::c_void,
    pub rfu_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_flow_rxMsgDispatchFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_flow_rxMsgDispatchFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_flow_rxMsgDispatchFuncInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(solClient_flow_rxMsgDispatchFuncInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_flow_rxMsgDispatchFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_flow_rxMsgDispatchFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dispatchType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_rxMsgDispatchFuncInfo),
            "::",
            stringify!(dispatchType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_rxMsgDispatchFuncInfo),
            "::",
            stringify!(callback_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_rxMsgDispatchFuncInfo),
            "::",
            stringify!(user_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rfu_p) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_rxMsgDispatchFuncInfo),
            "::",
            stringify!(rfu_p)
        )
    );
}
impl Default for solClient_flow_rxMsgDispatchFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_flow_rxMsgDispatchFuncInfo_t = solClient_flow_rxMsgDispatchFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_flow_createEventCallbackFuncInfo {
    pub callback_p: solClient_flow_eventCallbackFunc_t,
    pub user_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_solClient_flow_createEventCallbackFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_flow_createEventCallbackFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_flow_createEventCallbackFuncInfo>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(solClient_flow_createEventCallbackFuncInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_flow_createEventCallbackFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_flow_createEventCallbackFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_createEventCallbackFuncInfo),
            "::",
            stringify!(callback_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_createEventCallbackFuncInfo),
            "::",
            stringify!(user_p)
        )
    );
}
impl Default for solClient_flow_createEventCallbackFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_flow_createEventCallbackFuncInfo_t = solClient_flow_createEventCallbackFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_session_createFuncInfo {
    pub rxInfo: solClient_session_createRxCallbackFuncInfo_t,
    pub eventInfo: solClient_session_createEventCallbackFuncInfo_t,
    pub rxMsgInfo: solClient_session_createRxMsgCallbackFuncInfo_t,
}
#[test]
fn bindgen_test_layout_solClient_session_createFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_session_createFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_session_createFuncInfo>(),
        48usize,
        concat!("Size of: ", stringify!(solClient_session_createFuncInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_session_createFuncInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_session_createFuncInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rxInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_createFuncInfo),
            "::",
            stringify!(rxInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_createFuncInfo),
            "::",
            stringify!(eventInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rxMsgInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_session_createFuncInfo),
            "::",
            stringify!(rxMsgInfo)
        )
    );
}
impl Default for solClient_session_createFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_session_createFuncInfo_t = solClient_session_createFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_flow_createFuncInfo {
    pub rxInfo: solClient_flow_createRxCallbackFuncInfo_t,
    pub eventInfo: solClient_flow_createEventCallbackFuncInfo_t,
    pub rxMsgInfo: solClient_flow_createRxMsgCallbackFuncInfo_t,
}
#[test]
fn bindgen_test_layout_solClient_flow_createFuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_flow_createFuncInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_flow_createFuncInfo>(),
        48usize,
        concat!("Size of: ", stringify!(solClient_flow_createFuncInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_flow_createFuncInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(solClient_flow_createFuncInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rxInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_createFuncInfo),
            "::",
            stringify!(rxInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_createFuncInfo),
            "::",
            stringify!(eventInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rxMsgInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_flow_createFuncInfo),
            "::",
            stringify!(rxMsgInfo)
        )
    );
}
impl Default for solClient_flow_createFuncInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_flow_createFuncInfo_t = solClient_flow_createFuncInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solClient_version_info {
    pub version_p: *const ::std::os::raw::c_char,
    pub dateTime_p: *const ::std::os::raw::c_char,
    pub variant_p: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_solClient_version_info() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_version_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_version_info>(),
        24usize,
        concat!("Size of: ", stringify!(solClient_version_info))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_version_info>(),
        8usize,
        concat!("Alignment of ", stringify!(solClient_version_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_version_info),
            "::",
            stringify!(version_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dateTime_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_version_info),
            "::",
            stringify!(dateTime_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_version_info),
            "::",
            stringify!(variant_p)
        )
    );
}
impl Default for solClient_version_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solClient_version_info_pt = *mut solClient_version_info;
extern "C" {
    pub fn solClient_initialize(
        initialLogLevel: solClient_log_level_t,
        props: solClient_propertyArray_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_cleanup() -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_returnCodeToString(
        returnCode: solClient_returnCode_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn solClient_subCodeToString(subCode: solClient_subCode_t)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn solClient_txStatToString(txStat: solClient_stats_tx_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn solClient_rxStatToString(rxStat: solClient_stats_rx_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn solClient_getLastErrorInfo() -> solClient_errorInfo_pt;
}
extern "C" {
    pub fn solClient_resetLastErrorInfo();
}
extern "C" {
    pub fn solClient_version_get(
        version_p: *mut solClient_version_info_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_generateUUID(uuid_p: *mut solClient_uuid_t) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_generateUUIDString(
        uuid_p: *mut ::std::os::raw::c_char,
        bufferSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_appendUUIDString(
        inputStr: *const ::std::os::raw::c_char,
        uuid_p: *mut ::std::os::raw::c_char,
        bufferSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_log_setFilterLevel(
        category: solClient_log_category_t,
        level: solClient_log_level_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_log_setCallback(
        callback_p: solClient_log_callbackFunc_t,
        user_p: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_log_unsetCallback() -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_log_setFile(
        logFileName_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_log_categoryToString(
        category: solClient_log_category_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn solClient_log_levelToString(
        level: solClient_log_level_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn solClient_context_create(
        props: solClient_propertyArray_pt,
        opaqueContext_p: *mut solClient_opaqueContext_pt,
        funcInfo_p: *mut solClient_context_createFuncInfo_t,
        funcInfoSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_context_destroy(
        opaqueContext_p: *mut solClient_opaqueContext_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_context_registerForFdEvents(
        opaqueContext_p: solClient_opaqueContext_pt,
        fd: solClient_fd_t,
        events: solClient_fdEvent_t,
        callback_p: solClient_context_fdCallbackFunc_t,
        user_p: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_context_unregisterForFdEvents(
        opaqueContext_p: solClient_opaqueContext_pt,
        fd: solClient_fd_t,
        events: solClient_fdEvent_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_context_processEvents(
        opaqueContext_p: solClient_opaqueContext_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_context_processEventsWait(
        opaqueContext_p: solClient_opaqueContext_pt,
        wait: solClient_bool_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_context_startTimer(
        opaqueContext_p: solClient_opaqueContext_pt,
        timerMode: solClient_context_timerMode_t,
        durationMs: solClient_uint32_t,
        callback_p: solClient_context_timerCallbackFunc_t,
        user_p: *mut ::std::os::raw::c_void,
        timerId_p: *mut solClient_context_timerId_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_context_stopTimer(
        opaqueContext_p: solClient_opaqueContext_pt,
        timerId_p: *mut solClient_context_timerId_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_context_timerTick(
        opaqueContext_p: solClient_opaqueContext_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_create(
        props: solClient_propertyArray_pt,
        opaqueContext_p: solClient_opaqueContext_pt,
        opaqueSession_p: *mut solClient_opaqueSession_pt,
        funcInfo_p: *mut solClient_session_createFuncInfo_t,
        funcInfoSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_destroy(
        opaqueSession_p: *mut solClient_opaqueSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_getContext(
        opaqueSession_p: solClient_opaqueSession_pt,
        opaqueContext_p: *mut solClient_opaqueContext_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_modifyProperties(
        opaqueSession_p: solClient_opaqueSession_pt,
        props: solClient_propertyArray_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_modifyClientInfo(
        opaqueSession_p: solClient_opaqueSession_pt,
        props: solClient_propertyArray_pt,
        flag: solClient_modifyPropFlags_t,
        correlation_p: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_getProperty(
        opaqueSession_p: solClient_opaqueSession_pt,
        propertyName_p: *const ::std::os::raw::c_char,
        buf_p: *mut ::std::os::raw::c_char,
        bufSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_getCapability(
        opaqueSession_p: solClient_opaqueSession_pt,
        capabilityName_p: *const ::std::os::raw::c_char,
        field_p: *mut solClient_field_t,
        fieldSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_isCapable(
        opaqueSession_p: solClient_opaqueSession_pt,
        capabilityName_p: *const ::std::os::raw::c_char,
    ) -> solClient_bool_t;
}
extern "C" {
    pub fn solClient_session_connect(
        opaqueSession_p: solClient_opaqueSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_disconnect(
        opaqueSession_p: solClient_opaqueSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_startAssuredPublishing(
        opaqueSession_p: solClient_opaqueSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_sendMsg(
        opaqueSession_p: solClient_opaqueSession_pt,
        msg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_sendSmf(
        opaqueSession_p: solClient_opaqueSession_pt,
        smfBufInfo_p: solClient_bufInfo_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_sendMultipleMsg(
        opaqueSession_p: solClient_opaqueSession_pt,
        msgArray_p: *mut solClient_opaqueMsg_pt,
        numberOfMessages: solClient_uint32_t,
        numberOfMessagesWritten: *mut solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_sendMultipleSmf(
        opaqueSession_p: solClient_opaqueSession_pt,
        smfBufInfo_p: solClient_bufInfo_pt,
        numberOfMessages: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_topicSubscribe(
        opaqueSession_p: solClient_opaqueSession_pt,
        topicSubscription_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_topicSubscribeExt(
        opaqueSession_p: solClient_opaqueSession_pt,
        flags: solClient_subscribeFlags_t,
        topicSubscription_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_topicSubscribeWithDispatch(
        opaqueSession_p: solClient_opaqueSession_pt,
        flags: solClient_subscribeFlags_t,
        topicSubscription_p: *const ::std::os::raw::c_char,
        funcInfo_p: *mut solClient_session_rxMsgDispatchFuncInfo_t,
        correlationTag: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_topicUnsubscribe(
        opaqueSession_p: solClient_opaqueSession_pt,
        topicSubscription_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_topicUnsubscribeExt(
        opaqueSession_p: solClient_opaqueSession_pt,
        flags: solClient_subscribeFlags_t,
        topicSubscription_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_topicUnsubscribeWithDispatch(
        opaqueSession_p: solClient_opaqueSession_pt,
        flags: solClient_subscribeFlags_t,
        topicSubscription_p: *const ::std::os::raw::c_char,
        funcInfo_p: *mut solClient_session_rxMsgDispatchFuncInfo_t,
        correlationTag: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_validateTopic(
        opaqueSession_p: solClient_opaqueSession_pt,
        topicString_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_dteUnsubscribe(
        opaqueSession_p: solClient_opaqueSession_pt,
        teName_p: *const ::std::os::raw::c_char,
        correlationTag: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_getRxStats(
        opaqueSession_p: solClient_opaqueSession_pt,
        rxStats_p: solClient_stats_pt,
        arraySize: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_getRxStat(
        opaqueSession_p: solClient_opaqueSession_pt,
        rxStatType: solClient_stats_rx_t,
        rxStat_p: solClient_stats_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_getTxStats(
        opaqueSession_p: solClient_opaqueSession_pt,
        txStats_p: solClient_stats_pt,
        arraySize: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_getTxStat(
        opaqueSession_p: solClient_opaqueSession_pt,
        txStatType: solClient_stats_tx_t,
        txStat_p: solClient_stats_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_clearStats(
        opaqueSession_p: solClient_opaqueSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_logStats(
        opaqueSession_p: solClient_opaqueSession_pt,
        level: solClient_log_level_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_createTemporaryTopicName(
        opaqueSession_p: solClient_opaqueSession_pt,
        topic_p: *mut ::std::os::raw::c_char,
        length: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_logFlowInfo(
        opaqueSession_p: solClient_opaqueSession_pt,
        level: solClient_log_level_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_sendRequest(
        opaqueSession_p: solClient_opaqueSession_pt,
        msg_p: solClient_opaqueMsg_pt,
        replyMsg_p: *mut solClient_opaqueMsg_pt,
        timeout: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_sendReply(
        opaqueSession_p: solClient_opaqueSession_pt,
        rxmsg_p: solClient_opaqueMsg_pt,
        replyMsg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_eventToString(
        sessionEvent: solClient_session_event_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn solClient_session_endpointProvision(
        props: solClient_propertyArray_pt,
        opaqueSession_p: solClient_opaqueSession_pt,
        provisionFlags: solClient_uint32_t,
        correlationTag: *mut ::std::os::raw::c_void,
        queueNetworkName: *mut ::std::os::raw::c_char,
        qnnSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_endpointDeprovision(
        props: solClient_propertyArray_pt,
        opaqueSession_p: solClient_opaqueSession_pt,
        provisionFlags: solClient_uint32_t,
        correlationTag: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_endpointTopicSubscribe(
        endpointProps: solClient_propertyArray_pt,
        opaqueSession_p: solClient_opaqueSession_pt,
        flags: solClient_subscribeFlags_t,
        topicSubscription_p: *const ::std::os::raw::c_char,
        correlationTag: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_endpointTopicUnsubscribe(
        endpointProps: solClient_propertyArray_pt,
        opaqueSession_p: solClient_opaqueSession_pt,
        flags: solClient_subscribeFlags_t,
        topicSubscription_p: *const ::std::os::raw::c_char,
        correlationTag: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_session_createFlow(
        props: solClient_propertyArray_pt,
        opaqueSession_p: solClient_opaqueSession_pt,
        opaqueFlow_p: *mut solClient_opaqueFlow_pt,
        funcInfo_p: *mut solClient_flow_createFuncInfo_t,
        funcInfoSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_destroy(
        opaqueFlow_p: *mut solClient_opaqueFlow_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_getSession(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        opaqueSession_p: *mut solClient_opaqueSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_sendAck(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        msgId: solClient_msgId_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_settleMsg(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        msgId: solClient_msgId_t,
        outcome: solClient_msgOutcome_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_stop(opaqueFlow_p: solClient_opaqueFlow_pt) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_start(opaqueFlow_p: solClient_opaqueFlow_pt) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_setMaxUnacked(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        maxUnacked: solClient_int32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_getRxStats(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        rxStats_p: solClient_stats_pt,
        arraySize: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_getRxStat(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        rxStatType: solClient_stats_rx_t,
        rxStat_p: solClient_stats_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_getDestination(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        dest_p: *mut solClient_destination_t,
        destSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_clearStats(
        opaqueFlow_p: solClient_opaqueFlow_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_logStats(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        level: solClient_log_level_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_topicSubscribeWithDispatch(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        flags: solClient_subscribeFlags_t,
        topicSubscription_p: *const ::std::os::raw::c_char,
        funcInfo_p: *mut solClient_flow_rxMsgDispatchFuncInfo_t,
        correlationTag: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_topicUnsubscribeWithDispatch(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        flags: solClient_subscribeFlags_t,
        topicSubscription_p: *const ::std::os::raw::c_char,
        funcInfo_p: *mut solClient_flow_rxMsgDispatchFuncInfo_t,
        correlationTag: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_getProperty(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        propertyName_p: *const ::std::os::raw::c_char,
        buf_p: *mut ::std::os::raw::c_char,
        bufSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_logFlowInfo(
        opaqueFlow_p: solClient_opaqueFlow_pt,
        level: solClient_log_level_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_eventToString(
        flowEvent: solClient_flow_event_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn solClient_session_createTransactedSession(
        props: solClient_propertyArray_pt,
        session_p: solClient_opaqueSession_pt,
        transactedSession_p: *mut solClient_opaqueTransactedSession_pt,
        rfu_p: *mut ::std::os::raw::c_void,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_transactedSession_destroy(
        transactedSession_p: *mut solClient_opaqueTransactedSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_transactedSession_rollback(
        transactedSession_p: solClient_opaqueTransactedSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_transactedSession_commit(
        transactedSession_p: solClient_opaqueTransactedSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_transactedSession_sendMsg(
        transactedSession_p: solClient_opaqueTransactedSession_pt,
        msg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_transactedSession_createFlow(
        props: solClient_propertyArray_pt,
        transactedSession_p: solClient_opaqueTransactedSession_pt,
        flow_p: *mut solClient_opaqueFlow_pt,
        funcInfo_p: *mut solClient_flow_createFuncInfo_t,
        funcInfoSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_transactedSession_getSessionName(
        transactedSession_p: solClient_opaqueTransactedSession_pt,
        nameBuf_p: *mut ::std::os::raw::c_char,
        bufSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_receiveMsg(
        flow_p: solClient_opaqueFlow_pt,
        msg_p: *mut solClient_opaqueMsg_pt,
        timeout: solClient_int32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_flow_getTransactedSession(
        flow_p: solClient_opaqueFlow_pt,
        transactedSession_p: *mut solClient_opaqueTransactedSession_pt,
    ) -> solClient_returnCode_t;
}
pub const solClient_cacheStatus_SOLCLIENT_CACHE_INVALID_MESSAGE: solClient_cacheStatus = -1;
pub const solClient_cacheStatus_SOLCLIENT_CACHE_LIVE_MESSAGE: solClient_cacheStatus = 0;
pub const solClient_cacheStatus_SOLCLIENT_CACHE_MESSAGE: solClient_cacheStatus = 1;
pub const solClient_cacheStatus_SOLCLIENT_CACHE_SUSPECT_MESSAGE: solClient_cacheStatus = 2;
pub type solClient_cacheStatus = ::std::os::raw::c_int;
pub use self::solClient_cacheStatus as solClient_cacheStatus_t;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_TOTAL_MEMORY: solClient_msg_stats = 0;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_ALLOC_MEMORY: solClient_msg_stats = 1;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_MSG_ALLOCS: solClient_msg_stats = 2;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_MSG_FREES: solClient_msg_stats = 3;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_MSG_DUPS: solClient_msg_stats = 4;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_MSG_REALLOCS: solClient_msg_stats = 5;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_FREE_MSGS: solClient_msg_stats = 6;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_ALLOC_MSGS: solClient_msg_stats = 7;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_FREE_CONTAINERS: solClient_msg_stats = 8;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_ALLOC_CONTAINERS: solClient_msg_stats = 9;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_FREE_DATA_BLOCKS: solClient_msg_stats = 10;
pub const solClient_msg_stats_SOLCLIENT_MSG_STATS_ALLOC_DATA_BLOCKS: solClient_msg_stats = 11;
pub type solClient_msg_stats = ::std::os::raw::c_uint;
pub use self::solClient_msg_stats as solClient_msg_stats_t;
extern "C" {
    pub fn solClient_msg_alloc(msg_p: *mut solClient_opaqueMsg_pt) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_free(msg_p: *mut solClient_opaqueMsg_pt) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_dup(
        msg_p: solClient_opaqueMsg_pt,
        dupMsg_p: *mut solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_reset(msg_p: solClient_opaqueMsg_pt) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getUserPropertyMap(
        msg_p: solClient_opaqueMsg_pt,
        map_p: *mut solClient_opaqueContainer_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getBinaryAttachmentStream(
        msg_p: solClient_opaqueMsg_pt,
        stream_p: *mut solClient_opaqueContainer_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getBinaryAttachmentMap(
        msg_p: solClient_opaqueMsg_pt,
        map_p: *mut solClient_opaqueContainer_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getBinaryAttachmentPtr(
        msg_p: solClient_opaqueMsg_pt,
        bufPtr_p: solClient_opaquePointer_pt,
        size_p: *mut solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getBinaryAttachmentString(
        msg_p: solClient_opaqueMsg_pt,
        bufPtr_p: *mut *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getBinaryAttachmentContainerSize(
        msg_p: solClient_opaqueMsg_pt,
        size_p: *mut usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getCorrelationTagPtr(
        msg_p: solClient_opaqueMsg_pt,
        bufPtr_p: solClient_opaquePointer_pt,
        size_p: *mut solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getUserDataPtr(
        msg_p: solClient_opaqueMsg_pt,
        bufPtr_p: solClient_opaquePointer_pt,
        size_p: *mut solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getXmlPtr(
        msg_p: solClient_opaqueMsg_pt,
        bufPtr_p: solClient_opaquePointer_pt,
        size_p: *mut solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getSMFPtr(
        msg_p: solClient_opaqueMsg_pt,
        bufPtr_p: *mut *mut solClient_uint8_t,
        size_p: *mut solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setBinaryAttachmentPtr(
        msg_p: solClient_opaqueMsg_pt,
        buf_p: *mut ::std::os::raw::c_void,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setBinaryAttachment(
        msg_p: solClient_opaqueMsg_pt,
        buf_p: *const ::std::os::raw::c_void,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setBinaryAttachmentString(
        msg_p: solClient_opaqueMsg_pt,
        buf_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setBinaryAttachmentContainer(
        msg_p: solClient_opaqueMsg_pt,
        cont_p: solClient_opaqueContainer_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setBinaryAttachmentContainerPtr(
        msg_p: solClient_opaqueMsg_pt,
        cont_p: solClient_opaqueContainer_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setUserDataPtr(
        msg_p: solClient_opaqueMsg_pt,
        buf_p: *mut ::std::os::raw::c_void,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setUserData(
        msg_p: solClient_opaqueMsg_pt,
        buf_p: *const ::std::os::raw::c_void,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setXmlPtr(
        msg_p: solClient_opaqueMsg_pt,
        buf_p: *mut ::std::os::raw::c_void,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setXml(
        msg_p: solClient_opaqueMsg_pt,
        buf_p: *const ::std::os::raw::c_void,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setCorrelationTagPtr(
        msg_p: solClient_opaqueMsg_pt,
        correlation_p: *mut ::std::os::raw::c_void,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setCorrelationTag(
        msg_p: solClient_opaqueMsg_pt,
        correlation_p: *const ::std::os::raw::c_void,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setTopicPtr(
        msg_p: solClient_opaqueMsg_pt,
        topic_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setQueueNamePtr(
        msg_p: solClient_opaqueMsg_pt,
        queueName_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getReplyTo(
        msg_p: solClient_opaqueMsg_pt,
        dest_p: *mut solClient_destination_t,
        destSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setReplyTo(
        msg_p: solClient_opaqueMsg_pt,
        dest_p: *const solClient_destination_t,
        destSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_deleteReplyTo(msg_p: solClient_opaqueMsg_pt) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setDestination(
        msg_p: solClient_opaqueMsg_pt,
        dest_p: *mut solClient_destination_t,
        destSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getDestination(
        msg_p: solClient_opaqueMsg_pt,
        dest_p: *mut solClient_destination_t,
        destSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getSenderId(
        msg_p: solClient_opaqueMsg_pt,
        buf_p: *mut *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setSenderId(
        msg_p: solClient_opaqueMsg_pt,
        buf_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_deleteSenderId(msg_p: solClient_opaqueMsg_pt) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getApplicationMsgType(
        msg_p: solClient_opaqueMsg_pt,
        msgType_p: *mut *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setApplicationMsgType(
        msg_p: solClient_opaqueMsg_pt,
        msgType: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_deleteApplicationMsgType(
        msg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getApplicationMessageId(
        msg_p: solClient_opaqueMsg_pt,
        messageId_p: *mut *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setApplicationMessageId(
        msg_p: solClient_opaqueMsg_pt,
        messageId_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_deleteApplicationMessageId(
        msg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getSequenceNumber(
        msg_p: solClient_opaqueMsg_pt,
        seqNum_p: *mut solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setSequenceNumber(
        msg_p: solClient_opaqueMsg_pt,
        seqNum: solClient_uint64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_deleteSequenceNumber(
        msg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getCorrelationId(
        msg_p: solClient_opaqueMsg_pt,
        correlation_p: *mut *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setCorrelationId(
        msg_p: solClient_opaqueMsg_pt,
        correlation_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_deleteCorrelationId(
        msg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getRcvTimestamp(
        msg_p: solClient_opaqueMsg_pt,
        timestamp_p: *mut solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setSenderTimestamp(
        msg_p: solClient_opaqueMsg_pt,
        timestamp: solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getSenderTimestamp(
        msg_p: solClient_opaqueMsg_pt,
        timestamp_p: *mut solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_deleteSenderTimestamp(
        msg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setExpiration(
        msg_p: solClient_opaqueMsg_pt,
        timestamp: solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getExpiration(
        msg_p: solClient_opaqueMsg_pt,
        timestamp_p: *mut solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getClassOfService(
        msg_p: solClient_opaqueMsg_pt,
        cos_p: *mut solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setClassOfService(
        msg_p: solClient_opaqueMsg_pt,
        cos: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getTimeToLive(
        msg_p: solClient_opaqueMsg_pt,
        ttl_p: *mut solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setTimeToLive(
        msg_p: solClient_opaqueMsg_pt,
        ttl: solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getDeliveryMode(
        msg_p: solClient_opaqueMsg_pt,
        mode_p: *mut solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setDeliveryMode(
        msg_p: solClient_opaqueMsg_pt,
        mode: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getMsgId(
        msg_p: solClient_opaqueMsg_pt,
        msgId_p: *mut solClient_msgId_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getTopicSequenceNumber(
        msg_p: solClient_opaqueMsg_pt,
        seqNum_p: *mut solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getDeliveryCount(
        msg_p: solClient_opaqueMsg_pt,
        count_p: *mut solClient_int32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_isRedelivered(msg_p: solClient_opaqueMsg_pt) -> solClient_bool_t;
}
extern "C" {
    pub fn solClient_msg_isCacheMsg(msg_p: solClient_opaqueMsg_pt) -> solClient_cacheStatus_t;
}
extern "C" {
    pub fn solClient_msg_getCacheRequestId(
        msg_p: solClient_opaqueMsg_pt,
        cacheRequestId_p: *mut solClient_uint64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_isDiscardIndication(msg_p: solClient_opaqueMsg_pt) -> solClient_bool_t;
}
extern "C" {
    pub fn solClient_msg_isReplyMsg(msg_p: solClient_opaqueMsg_pt) -> solClient_bool_t;
}
extern "C" {
    pub fn solClient_msg_setDMQEligible(
        msg_p: solClient_opaqueMsg_pt,
        val: solClient_bool_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_isDMQEligible(msg_p: solClient_opaqueMsg_pt) -> solClient_bool_t;
}
extern "C" {
    pub fn solClient_msg_setReplyToSuffix(
        msg_p: solClient_opaqueMsg_pt,
        opaqueSession_p: solClient_opaqueSession_pt,
        suffix_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getDestinationTopicSuffix(
        msg_p: solClient_opaqueMsg_pt,
        opaqueSession_p: solClient_opaqueSession_pt,
        suffix_p: *mut *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setAsReplyMsg(
        msg_p: solClient_opaqueMsg_pt,
        isReply: solClient_bool_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setElidingEligible(
        msg_p: solClient_opaqueMsg_pt,
        elide: solClient_bool_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_isElidingEligible(msg_p: solClient_opaqueMsg_pt) -> solClient_bool_t;
}
extern "C" {
    pub fn solClient_msg_createBinaryAttachmentMap(
        msg_p: solClient_opaqueMsg_pt,
        map_p: *mut solClient_opaqueContainer_pt,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_createBinaryAttachmentStream(
        msg_p: solClient_opaqueMsg_pt,
        stream_p: *mut solClient_opaqueContainer_pt,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_createUserPropertyMap(
        msg_p: solClient_opaqueMsg_pt,
        map_p: *mut solClient_opaqueContainer_pt,
        size: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setUserPropertyMap(
        msg_p: solClient_opaqueMsg_pt,
        map_p: solClient_opaqueContainer_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getBinaryAttachmentField(
        msg_p: solClient_opaqueMsg_pt,
        field_p: *mut solClient_field_t,
        fieldSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getStat(
        msgStatType: solClient_msg_stats_t,
        statIndex: solClient_uint32_t,
        statValue_p: *mut solClient_uint64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_dumpExt(
        msg_p: solClient_opaqueMsg_pt,
        buffer_p: *mut ::std::os::raw::c_char,
        bufferSize: usize,
        flags: solClient_uint32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_dump(
        msg_p: solClient_opaqueMsg_pt,
        buffer_p: *mut ::std::os::raw::c_char,
        bufferSize: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setAckImmediately(
        msg_p: solClient_opaqueMsg_pt,
        val: solClient_bool_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_isAckImmediately(msg_p: solClient_opaqueMsg_pt) -> solClient_bool_t;
}
extern "C" {
    pub fn solClient_msg_getHttpContentType(
        msg_p: solClient_opaqueMsg_pt,
        type_p: *mut *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getHttpContentEncoding(
        msg_p: solClient_opaqueMsg_pt,
        encoding_p: *mut *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setHttpContentType(
        msg_p: solClient_opaqueMsg_pt,
        type_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setHttpContentEncoding(
        msg_p: solClient_opaqueMsg_pt,
        encoding_p: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_deleteHttpContentType(
        msg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_deleteHttpContentEncoding(
        msg_p: solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_createMap(
        newContainer_p: *mut solClient_opaqueContainer_pt,
        mem_p: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_createStream(
        newContainer_p: *mut solClient_opaqueContainer_pt,
        mem_p: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_openSubMap(
        container_p: solClient_opaqueContainer_pt,
        newContainer_p: *mut solClient_opaqueContainer_pt,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_openSubStream(
        container_p: solClient_opaqueContainer_pt,
        newContainer_p: *mut solClient_opaqueContainer_pt,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_closeMapStream(
        container_p: *mut solClient_opaqueContainer_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addNull(
        container_p: solClient_opaqueContainer_pt,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addBoolean(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_bool_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addUint8(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_uint8_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addInt8(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_int8_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addUint16(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_uint16_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addInt16(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_int16_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addUint32(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_uint32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addInt32(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_int32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addUint64(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_uint64_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addInt64(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_int64_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addChar(
        container_p: solClient_opaqueContainer_pt,
        value: ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addWchar(
        container_p: solClient_opaqueContainer_pt,
        value: solClient_wchar_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addByteArray(
        container_p: solClient_opaqueContainer_pt,
        arr_p: *const solClient_uint8_t,
        length: solClient_uint32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addSmf(
        container_p: solClient_opaqueContainer_pt,
        smf_p: *const solClient_uint8_t,
        length: solClient_uint32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addContainer(
        container_p: solClient_opaqueContainer_pt,
        subContainer_p: solClient_opaqueContainer_pt,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addFloat(
        container_p: solClient_opaqueContainer_pt,
        value: f32,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addDouble(
        container_p: solClient_opaqueContainer_pt,
        value: f64,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addString(
        container_p: solClient_opaqueContainer_pt,
        value: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addDestination(
        container_p: solClient_opaqueContainer_pt,
        value: *const solClient_destination_t,
        destSize: usize,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_addUnknownField(
        container_p: solClient_opaqueContainer_pt,
        field_p: *const solClient_uint8_t,
        length: usize,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_rewind(
        container_p: solClient_opaqueContainer_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_hasNextField(
        container_p: solClient_opaqueContainer_pt,
    ) -> solClient_bool_t;
}
extern "C" {
    pub fn solClient_container_getNextField(
        container_p: solClient_opaqueContainer_pt,
        field_p: *mut solClient_field_t,
        fieldSize: usize,
        name_p: *mut *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getField(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_field_t,
        fieldSize: usize,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getSize(
        container_p: solClient_opaqueContainer_pt,
        size_p: *mut usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getNull(
        container_p: solClient_opaqueContainer_pt,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getBoolean(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_bool_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getUint8(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_uint8_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getInt8(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_int8_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getUint16(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_uint16_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getInt16(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_int16_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getUint32(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_uint32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getInt32(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_int32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getUint64(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_uint64_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getInt64(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_int64_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getChar(
        container_p: solClient_opaqueContainer_pt,
        value: *mut ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getWchar(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_wchar_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getByteArrayPtr(
        container_p: solClient_opaqueContainer_pt,
        array_p: *mut *mut solClient_uint8_t,
        arrayLength_p: *mut solClient_uint32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getByteArray(
        container_p: solClient_opaqueContainer_pt,
        array_p: *mut solClient_uint8_t,
        arrayLength_p: *mut solClient_uint32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getSmfPtr(
        container_p: solClient_opaqueContainer_pt,
        smf_p: *mut *mut solClient_uint8_t,
        smfLength_p: *mut solClient_uint32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getSmf(
        container_p: solClient_opaqueContainer_pt,
        smf_p: *mut solClient_uint8_t,
        smfLength_p: *mut solClient_uint32_t,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getFloat(
        container_p: solClient_opaqueContainer_pt,
        value: *mut f32,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getDouble(
        container_p: solClient_opaqueContainer_pt,
        value: *mut f64,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getStringPtr(
        container_p: solClient_opaqueContainer_pt,
        string: *mut *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getString(
        container_p: solClient_opaqueContainer_pt,
        string: *mut ::std::os::raw::c_char,
        size: usize,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getDestination(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_destination_t,
        destSize: usize,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getSubMap(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_opaqueContainer_pt,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_getSubStream(
        container_p: solClient_opaqueContainer_pt,
        value: *mut solClient_opaqueContainer_pt,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_container_deleteField(
        container_p: solClient_opaqueContainer_pt,
        name: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_decodeFromSmf(
        bufinfo_p: solClient_bufInfo_pt,
        msg_p: *mut solClient_opaqueMsg_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_encodeToSMF(
        msg_p: solClient_opaqueMsg_pt,
        bufinfo_p: solClient_bufInfo_pt,
        datab_p: *mut solClient_opaqueDatablock_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getPriority(
        msg_p: solClient_opaqueMsg_pt,
        priority_p: *mut solClient_int32_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_setPriority(
        msg_p: solClient_opaqueMsg_pt,
        priority: solClient_int32_t,
    ) -> solClient_returnCode_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct solClient_replicationGroupMessageId {
    pub replicationGroupMessageId: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_solClient_replicationGroupMessageId() {
    const UNINIT: ::std::mem::MaybeUninit<solClient_replicationGroupMessageId> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solClient_replicationGroupMessageId>(),
        16usize,
        concat!("Size of: ", stringify!(solClient_replicationGroupMessageId))
    );
    assert_eq!(
        ::std::mem::align_of::<solClient_replicationGroupMessageId>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(solClient_replicationGroupMessageId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replicationGroupMessageId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solClient_replicationGroupMessageId),
            "::",
            stringify!(replicationGroupMessageId)
        )
    );
}
pub type solClient_replicationGroupMessageId_pt = *mut solClient_replicationGroupMessageId;
extern "C" {
    pub fn solClient_replicationGroupMessageId_isValid(
        rgmid_p: solClient_replicationGroupMessageId_pt,
    ) -> solClient_bool_t;
}
extern "C" {
    pub fn solClient_replicationGroupMessageId_compare(
        rgmid1_p: solClient_replicationGroupMessageId_pt,
        rgmid2_p: solClient_replicationGroupMessageId_pt,
        compare_p: *mut ::std::os::raw::c_int,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_replicationGroupMessageId_toString(
        rgmid_p: solClient_replicationGroupMessageId_pt,
        size_rgmid: usize,
        str_: *mut ::std::os::raw::c_char,
        size_str: usize,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_replicationGroupMessageId_fromString(
        rgmid_p: solClient_replicationGroupMessageId_pt,
        size_rgmid: usize,
        rgmid_str: *const ::std::os::raw::c_char,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_msg_getReplicationGroupMessageId(
        msg_p: solClient_opaqueMsg_pt,
        rgmid_p: solClient_replicationGroupMessageId_pt,
        size: usize,
    ) -> solClient_returnCode_t;
}
pub const solCache_event_SOLCACHE_EVENT_REQUEST_COMPLETED_NOTICE: solCache_event = 0;
pub type solCache_event = ::std::os::raw::c_uint;
pub use self::solCache_event as solCache_event_t;
pub type solClient_opaqueCacheSession_pt = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solCache_eventCallbackInfo {
    pub cacheEvent: solCache_event_t,
    pub topic: *const ::std::os::raw::c_char,
    pub rc: solClient_returnCode_t,
    pub subCode: solClient_subCode_t,
    pub cacheRequestId: solClient_uint64_t,
}
#[test]
fn bindgen_test_layout_solCache_eventCallbackInfo() {
    const UNINIT: ::std::mem::MaybeUninit<solCache_eventCallbackInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<solCache_eventCallbackInfo>(),
        32usize,
        concat!("Size of: ", stringify!(solCache_eventCallbackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<solCache_eventCallbackInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(solCache_eventCallbackInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cacheEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solCache_eventCallbackInfo),
            "::",
            stringify!(cacheEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topic) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solCache_eventCallbackInfo),
            "::",
            stringify!(topic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(solCache_eventCallbackInfo),
            "::",
            stringify!(rc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subCode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(solCache_eventCallbackInfo),
            "::",
            stringify!(subCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cacheRequestId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(solCache_eventCallbackInfo),
            "::",
            stringify!(cacheRequestId)
        )
    );
}
impl Default for solCache_eventCallbackInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type solCache_eventCallbackInfo_pt = *mut solCache_eventCallbackInfo;
pub type solCache_eventCallbackFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueSession_p: solClient_opaqueSession_pt,
        eventInfo_p: solCache_eventCallbackInfo_pt,
        user_p: *mut ::std::os::raw::c_void,
    ),
>;
pub type solClient_cacheRequestFlags_t = solClient_uint32_t;
extern "C" {
    pub fn solClient_cacheSession_eventToString(
        cacheEvent: solCache_event_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn solClient_session_createCacheSession(
        props: *const *const ::std::os::raw::c_char,
        opaqueSession_p: solClient_opaqueSession_pt,
        opaqueCacheSession_p: *mut solClient_opaqueCacheSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_cacheSession_destroy(
        opaqueCacheSession_p: *mut solClient_opaqueCacheSession_pt,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_cacheSession_sendCacheRequest(
        opaqueCacheSession_p: solClient_opaqueCacheSession_pt,
        topic_p: *const ::std::os::raw::c_char,
        cacheRequestId: solClient_uint64_t,
        callback_p: solCache_eventCallbackFunc_t,
        user_p: *mut ::std::os::raw::c_void,
        cacheflags: solClient_cacheRequestFlags_t,
        subscribeFlags: solClient_subscribeFlags_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_cacheSession_sendCacheRequestSequence(
        opaqueCacheSession_p: solClient_opaqueCacheSession_pt,
        topic_p: *const ::std::os::raw::c_char,
        cacheRequestId: solClient_uint64_t,
        callback_p: solCache_eventCallbackFunc_t,
        user_p: *mut ::std::os::raw::c_void,
        cacheflags: solClient_cacheRequestFlags_t,
        subscribeFlags: solClient_subscribeFlags_t,
        startSeqId: solClient_int64_t,
        endSeqId: solClient_int64_t,
    ) -> solClient_returnCode_t;
}
extern "C" {
    pub fn solClient_cacheSession_cancelCacheRequests(
        opaqueCacheSession_p: solClient_opaqueCacheSession_pt,
    ) -> solClient_returnCode_t;
}
